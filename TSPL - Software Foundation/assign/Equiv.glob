DIGEST f0ce904e614edcdd13667053db40d7f0
FEquiv
R53:65 Coq.Bool.Bool <> <> lib
R83:97 Coq.Arith.Arith <> <> lib
R115:129 Coq.Arith.EqNat <> <> lib
R147:161 Coq.omega.Omega <> <> lib
R179:192 Coq.Lists.List <> <> lib
R232:265 Coq.Logic.FunctionalExtensionality <> <> lib
R284:288 SfLib <> <> lib
R306:309 Maps <> <> lib
R327:329 Imp <> <> lib
def 2578:2583 <> aequiv
R2594:2597 Imp <> aexp ind
R2623:2627 Imp <> state def
R2646:2648 Coq.Init.Logic <> :type_scope:x_'='_x not
R2635:2639 Imp <> aeval def
R2644:2645 Equiv <> a1 var
R2641:2642 Equiv <> st var
R2649:2653 Imp <> aeval def
R2658:2659 Equiv <> a2 var
R2655:2656 Equiv <> st var
def 2674:2679 <> bequiv
R2690:2693 Imp <> bexp ind
R2719:2723 Imp <> state def
R2742:2744 Coq.Init.Logic <> :type_scope:x_'='_x not
R2731:2735 Imp <> beval def
R2740:2741 Equiv <> b1 var
R2737:2738 Equiv <> st var
R2745:2749 Imp <> beval def
R2754:2755 Equiv <> b2 var
R2751:2752 Equiv <> st var
def 3418:3423 <> cequiv
R3434:3436 Imp <> com ind
R3468:3472 Imp <> state def
R3480:3480 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3495:3501 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3516:3516 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3483:3485 Imp <> ::x_'/'_x_'\\'_x not
R3488:3491 Imp <> ::x_'/'_x_'\\'_x not
R3481:3482 Equiv <> c1 var
R3486:3487 Equiv <> st var
R3492:3494 Equiv <> st' var
R3504:3506 Imp <> ::x_'/'_x_'\\'_x not
R3509:3512 Imp <> ::x_'/'_x_'\\'_x not
R3502:3503 Equiv <> c2 var
R3507:3508 Equiv <> st var
R3513:3515 Equiv <> st' var
def 4093:4098 <> prog_a
R4102:4104 Imp <> com ind
R4111:4116 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4144:4151 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4180:4185 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4117:4120 Imp <> BNot constr
R4123:4125 Imp <> BLe constr
R4136:4139 Imp <> ANum constr
R4128:4130 Imp <> AId constr
R4132:4132 Imp <> X def
R4153:4157 Imp <> ::x_'::='_x not
R4152:4152 Imp <> X def
R4158:4162 Imp <> APlus constr
R4173:4176 Imp <> ANum constr
R4165:4167 Imp <> AId constr
R4169:4169 Imp <> X def
def 4200:4205 <> prog_b
R4209:4211 Imp <> com ind
R4328:4332 Imp <> ::x_';;'_x not
R4218:4221 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4242:4251 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4299:4310 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4323:4327 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4222:4224 Imp <> BEq constr
R4235:4238 Imp <> ANum constr
R4227:4229 Imp <> AId constr
R4231:4231 Imp <> X def
R4280:4286 Imp <> ::x_';;'_x not
R4253:4257 Imp <> ::x_'::='_x not
R4252:4252 Imp <> X def
R4258:4262 Imp <> APlus constr
R4273:4276 Imp <> ANum constr
R4265:4267 Imp <> AId constr
R4269:4269 Imp <> X def
R4288:4292 Imp <> ::x_'::='_x not
R4287:4287 Imp <> Y def
R4293:4296 Imp <> ANum constr
R4312:4316 Imp <> ::x_'::='_x not
R4311:4311 Imp <> Y def
R4317:4320 Imp <> ANum constr
R4361:4365 Imp <> ::x_';;'_x not
R4334:4338 Imp <> ::x_'::='_x not
R4333:4333 Imp <> X def
R4339:4344 Imp <> AMinus constr
R4355:4357 Imp <> AId constr
R4359:4359 Imp <> Y def
R4347:4349 Imp <> AId constr
R4351:4351 Imp <> X def
R4367:4371 Imp <> ::x_'::='_x not
R4366:4366 Imp <> Y def
R4372:4375 Imp <> ANum constr
def 4392:4397 <> prog_c
R4401:4403 Imp <> com ind
R4410:4413 Imp <> ::'SKIP' not
def 4428:4433 <> prog_d
R4437:4439 Imp <> com ind
R4446:4451 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4479:4486 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4531:4536 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4452:4455 Imp <> BNot constr
R4458:4460 Imp <> BEq constr
R4471:4474 Imp <> ANum constr
R4463:4465 Imp <> AId constr
R4467:4467 Imp <> X def
R4488:4492 Imp <> ::x_'::='_x not
R4487:4487 Imp <> X def
R4493:4497 Imp <> APlus constr
R4524:4527 Imp <> ANum constr
R4500:4504 Imp <> AMult constr
R4515:4517 Imp <> AId constr
R4519:4519 Imp <> Y def
R4507:4509 Imp <> AId constr
R4511:4511 Imp <> X def
def 4551:4556 <> prog_e
R4560:4562 Imp <> com ind
R4570:4574 Imp <> ::x_'::='_x not
R4569:4569 Imp <> Y def
R4575:4578 Imp <> ANum constr
def 4595:4600 <> prog_f
R4604:4606 Imp <> com ind
R4641:4645 Imp <> ::x_';;'_x not
R4614:4618 Imp <> ::x_'::='_x not
R4613:4613 Imp <> Y def
R4619:4623 Imp <> APlus constr
R4634:4637 Imp <> ANum constr
R4626:4628 Imp <> AId constr
R4630:4630 Imp <> X def
R4646:4651 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4678:4685 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4714:4719 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4652:4655 Imp <> BNot constr
R4658:4660 Imp <> BEq constr
R4671:4673 Imp <> AId constr
R4675:4675 Imp <> Y def
R4663:4665 Imp <> AId constr
R4667:4667 Imp <> X def
R4687:4691 Imp <> ::x_'::='_x not
R4686:4686 Imp <> Y def
R4692:4696 Imp <> APlus constr
R4707:4710 Imp <> ANum constr
R4699:4701 Imp <> AId constr
R4703:4703 Imp <> X def
def 4734:4739 <> prog_g
R4743:4745 Imp <> com ind
R4752:4757 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4763:4770 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4775:4780 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4758:4762 Imp <> BTrue constr
R4771:4774 Imp <> ::'SKIP' not
def 4795:4800 <> prog_h
R4804:4806 Imp <> com ind
R4813:4818 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4845:4852 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4881:4886 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4819:4822 Imp <> BNot constr
R4825:4827 Imp <> BEq constr
R4838:4840 Imp <> AId constr
R4842:4842 Imp <> X def
R4830:4832 Imp <> AId constr
R4834:4834 Imp <> X def
R4854:4858 Imp <> ::x_'::='_x not
R4853:4853 Imp <> X def
R4859:4863 Imp <> APlus constr
R4874:4877 Imp <> ANum constr
R4866:4868 Imp <> AId constr
R4870:4870 Imp <> X def
def 4901:4906 <> prog_i
R4910:4912 Imp <> com ind
R4919:4924 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4951:4958 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4987:4992 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4925:4928 Imp <> BNot constr
R4931:4933 Imp <> BEq constr
R4944:4946 Imp <> AId constr
R4948:4948 Imp <> Y def
R4936:4938 Imp <> AId constr
R4940:4940 Imp <> X def
R4960:4964 Imp <> ::x_'::='_x not
R4959:4959 Imp <> X def
R4965:4969 Imp <> APlus constr
R4980:4983 Imp <> ANum constr
R4972:4974 Imp <> AId constr
R4976:4976 Imp <> Y def
def 5007:5019 <> equiv_classes
R5023:5026 Coq.Init.Datatypes <> list ind
R5029:5032 Coq.Init.Datatypes <> list ind
R5034:5036 Imp <> com ind
R5061:5065 SfLib <> admit prfax
prf 5320:5333 <> aequiv_example
R5338:5343 Equiv <> aequiv def
R5371:5374 Imp <> ANum constr
R5346:5351 Imp <> AMinus constr
R5362:5364 Imp <> AId constr
R5366:5366 Imp <> X def
R5354:5356 Imp <> AId constr
R5358:5358 Imp <> X def
prf 5428:5441 <> bequiv_example
R5446:5451 Equiv <> bequiv def
R5493:5497 Imp <> BTrue constr
R5454:5456 Imp <> BEq constr
R5484:5487 Imp <> ANum constr
R5459:5464 Imp <> AMinus constr
R5475:5477 Imp <> AId constr
R5479:5479 Imp <> X def
R5467:5469 Imp <> AId constr
R5471:5471 Imp <> X def
R5527:5531 Imp <> beval def
R5544:5557 Equiv <> aequiv_example thm
R5544:5557 Equiv <> aequiv_example thm
prf 5717:5725 <> skip_left
R5740:5745 Equiv <> cequiv def
R5768:5768 Equiv <> c var
R5757:5759 Imp <> ::x_';;'_x not
R5753:5756 Imp <> ::'SKIP' not
R5760:5760 Equiv <> c var
R5941:5945 Imp <> E_Seq constr
R5941:5945 Imp <> E_Seq constr
R5966:5971 Imp <> E_Skip constr
R5966:5971 Imp <> E_Skip constr
prf 6134:6143 <> skip_right
R6158:6163 Equiv <> cequiv def
R6184:6184 Equiv <> c var
R6171:6173 Imp <> ::x_';;'_x not
R6170:6170 Equiv <> c var
R6174:6177 Imp <> ::'SKIP' not
prf 6332:6346 <> IFB_true_simple
R6365:6370 Equiv <> cequiv def
R6411:6412 Equiv <> c1 var
R6377:6380 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6386:6391 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6394:6399 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6402:6404 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6381:6385 Imp <> BTrue constr
R6392:6393 Equiv <> c1 var
R6400:6401 Equiv <> c2 var
R6543:6550 Imp <> E_IfTrue constr
R6543:6550 Imp <> E_IfTrue constr
prf 8461:8468 <> IFB_true
R8516:8521 Equiv <> cequiv def
R8564:8565 Equiv <> c1 var
R8531:8534 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8536:8541 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8544:8549 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8552:8554 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8535:8535 Equiv <> b var
R8542:8543 Equiv <> c1 var
R8550:8551 Equiv <> c2 var
R8492:8497 Equiv <> bequiv def
R8501:8505 Imp <> BTrue constr
R8499:8499 Equiv <> b var
R8764:8769 Equiv <> bequiv def
R8858:8865 Imp <> E_IfTrue constr
R8858:8865 Imp <> E_IfTrue constr
R8895:8900 Equiv <> bequiv def
prf 9022:9030 <> IFB_false
R9073:9078 Equiv <> cequiv def
R9115:9116 Equiv <> c2 var
R9085:9088 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9090:9095 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9098:9103 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9106:9108 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9089:9089 Equiv <> b var
R9096:9097 Equiv <> c1 var
R9104:9105 Equiv <> c2 var
R9051:9056 Equiv <> bequiv def
R9060:9065 Imp <> BFalse constr
R9058:9058 Equiv <> b var
prf 9308:9323 <> swap_if_branches
R9344:9349 Equiv <> cequiv def
R9387:9390 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9397:9402 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9405:9410 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9413:9415 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9391:9394 Imp <> BNot constr
R9396:9396 Equiv <> b var
R9403:9404 Equiv <> e2 var
R9411:9412 Equiv <> e1 var
R9356:9359 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9361:9366 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9369:9374 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9377:9379 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9360:9360 Equiv <> b var
R9367:9368 Equiv <> e1 var
R9375:9376 Equiv <> e2 var
prf 9797:9807 <> WHILE_false
R9852:9857 Equiv <> cequiv def
R9892:9895 Imp <> ::'SKIP' not
R9867:9872 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9874:9877 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9879:9882 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9873:9873 Equiv <> b var
R9878:9878 Equiv <> c var
R9828:9833 Equiv <> bequiv def
R9837:9842 Imp <> BFalse constr
R9835:9835 Equiv <> b var
R10011:10016 Imp <> E_Skip constr
R10011:10016 Imp <> E_Skip constr
R10128:10137 Imp <> E_WhileEnd constr
R10128:10137 Imp <> E_WhileEnd constr
prf 11465:11482 <> WHILE_true_nonterm
R11533:11535 Coq.Init.Logic <> :type_scope:'~'_x not
R11566:11567 Coq.Init.Logic <> :type_scope:'~'_x not
R11536:11536 Imp <> ::x_'/'_x_'\\'_x not
R11553:11556 Imp <> ::x_'/'_x_'\\'_x not
R11559:11562 Imp <> ::x_'/'_x_'\\'_x not
R11537:11542 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11544:11547 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11549:11552 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11543:11543 Equiv <> b var
R11548:11548 Equiv <> c var
R11557:11558 Equiv <> st var
R11563:11565 Equiv <> st' var
R11510:11515 Equiv <> bequiv def
R11519:11523 Imp <> BTrue constr
R11517:11517 Equiv <> b var
R11649:11654 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11656:11659 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11661:11664 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11649:11654 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11656:11659 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11661:11664 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11956:11961 Equiv <> bequiv def
prf 12491:12500 <> WHILE_true
R12544:12549 Equiv <> cequiv def
R12585:12590 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12596:12599 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12604:12607 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12591:12595 Imp <> BTrue constr
R12600:12603 Imp <> ::'SKIP' not
R12559:12564 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12566:12569 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12571:12574 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12565:12565 Equiv <> b var
R12570:12570 Equiv <> c var
R12520:12525 Equiv <> bequiv def
R12529:12533 Imp <> BTrue constr
R12527:12527 Equiv <> b var
prf 12668:12681 <> loop_unrolling
R12698:12703 Equiv <> cequiv def
R12733:12736 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12738:12744 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12765:12771 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12776:12778 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12737:12737 Equiv <> b var
R12746:12748 Imp <> ::x_';;'_x not
R12745:12745 Equiv <> c var
R12749:12754 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12756:12759 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12761:12764 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12755:12755 Equiv <> b var
R12760:12760 Equiv <> c var
R12772:12775 Imp <> ::'SKIP' not
R12710:12715 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12717:12720 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12722:12725 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12716:12716 Equiv <> b var
R12721:12721 Equiv <> c var
R12935:12943 Imp <> E_IfFalse constr
R12935:12943 Imp <> E_IfFalse constr
R12964:12969 Imp <> E_Skip constr
R12964:12969 Imp <> E_Skip constr
R13006:13013 Imp <> E_IfTrue constr
R13006:13013 Imp <> E_IfTrue constr
R13040:13044 Imp <> E_Seq constr
R13040:13044 Imp <> E_Seq constr
R13190:13200 Imp <> E_WhileLoop constr
R13190:13200 Imp <> E_WhileLoop constr
R13326:13335 Imp <> E_WhileEnd constr
R13326:13335 Imp <> E_WhileEnd constr
prf 13418:13426 <> seq_assoc
R13449:13454 Equiv <> cequiv def
R13474:13476 Imp <> ::x_';;'_x not
R13483:13483 Imp <> ::x_';;'_x not
R13472:13473 Equiv <> c1 var
R13479:13480 Imp <> ::x_';;'_x not
R13477:13478 Equiv <> c2 var
R13481:13482 Equiv <> c3 var
R13457:13457 Imp <> ::x_';;'_x not
R13464:13466 Imp <> ::x_';;'_x not
R13460:13461 Imp <> ::x_';;'_x not
R13458:13459 Equiv <> c1 var
R13462:13463 Equiv <> c2 var
R13467:13468 Equiv <> c3 var
prf 13946:13974 <> identity_assignment_first_try
R13988:13989 Maps <> id ind
R13995:14000 Equiv <> cequiv def
R14016:14019 Imp <> ::'SKIP' not
R14004:14008 Imp <> ::x_'::='_x not
R14003:14003 Equiv <> X var
R14009:14011 Imp <> AId constr
R14013:14013 Equiv <> X var
R14123:14130 Maps <> t_update def
R14123:14130 Maps <> t_update def
prf 16547:16565 <> identity_assignment
R16579:16580 Maps <> id ind
R16586:16591 Equiv <> cequiv def
R16615:16618 Imp <> ::'SKIP' not
R16599:16603 Imp <> ::x_'::='_x not
R16598:16598 Equiv <> X var
R16604:16606 Imp <> AId constr
R16608:16608 Equiv <> X var
R16721:16728 Maps <> t_update def
R16721:16728 Maps <> t_update def
R16785:16809 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16785:16809 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16834:16846 Maps <> t_update_same prfax
R16834:16846 Maps <> t_update_same prfax
R16923:16926 Coq.Init.Logic <> :type_scope:x_'='_x not
R16949:16949 Coq.Init.Logic <> :type_scope:x_'='_x not
R16927:16934 Maps <> t_update def
R16923:16926 Coq.Init.Logic <> :type_scope:x_'='_x not
R16949:16949 Coq.Init.Logic <> :type_scope:x_'='_x not
R16927:16934 Maps <> t_update def
R16969:16993 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16969:16993 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R17021:17033 Maps <> t_update_same prfax
R17021:17033 Maps <> t_update_same prfax
prf 17180:17192 <> assign_aequiv
R17232:17237 Equiv <> cequiv def
R17246:17250 Imp <> ::x_'::='_x not
R17245:17245 Equiv <> X var
R17251:17251 Equiv <> e var
R17239:17242 Imp <> ::'SKIP' not
R17210:17215 Equiv <> aequiv def
R17225:17225 Equiv <> e var
R17218:17220 Imp <> AId constr
R17222:17222 Equiv <> X var
prf 17839:17849 <> refl_aequiv
R17865:17868 Imp <> aexp ind
R17872:17877 Equiv <> aequiv def
R17881:17881 Equiv <> a var
R17879:17879 Equiv <> a var
prf 17932:17941 <> sym_aequiv
R17961:17964 Imp <> aexp ind
R17986:17991 Equiv <> aequiv def
R17996:17997 Equiv <> a1 var
R17993:17994 Equiv <> a2 var
R17970:17975 Equiv <> aequiv def
R17980:17981 Equiv <> a2 var
R17977:17978 Equiv <> a1 var
prf 18068:18079 <> trans_aequiv
R18102:18105 Imp <> aexp ind
R18143:18148 Equiv <> aequiv def
R18153:18154 Equiv <> a3 var
R18150:18151 Equiv <> a1 var
R18127:18132 Equiv <> aequiv def
R18137:18138 Equiv <> a3 var
R18134:18135 Equiv <> a2 var
R18111:18116 Equiv <> aequiv def
R18121:18122 Equiv <> a2 var
R18118:18119 Equiv <> a1 var
R18173:18178 Equiv <> aequiv def
prf 18273:18283 <> refl_bequiv
R18299:18302 Imp <> bexp ind
R18306:18311 Equiv <> bequiv def
R18315:18315 Equiv <> b var
R18313:18313 Equiv <> b var
R18334:18339 Equiv <> bequiv def
prf 18381:18390 <> sym_bequiv
R18410:18413 Imp <> bexp ind
R18435:18440 Equiv <> bequiv def
R18445:18446 Equiv <> b1 var
R18442:18443 Equiv <> b2 var
R18419:18424 Equiv <> bequiv def
R18429:18430 Equiv <> b2 var
R18426:18427 Equiv <> b1 var
R18465:18470 Equiv <> bequiv def
prf 18532:18543 <> trans_bequiv
R18566:18569 Imp <> bexp ind
R18607:18612 Equiv <> bequiv def
R18617:18618 Equiv <> b3 var
R18614:18615 Equiv <> b1 var
R18591:18596 Equiv <> bequiv def
R18601:18602 Equiv <> b3 var
R18598:18599 Equiv <> b2 var
R18575:18580 Equiv <> bequiv def
R18585:18586 Equiv <> b2 var
R18582:18583 Equiv <> b1 var
R18637:18642 Equiv <> bequiv def
prf 18737:18747 <> refl_cequiv
R18763:18765 Imp <> com ind
R18769:18774 Equiv <> cequiv def
R18778:18778 Equiv <> c var
R18776:18776 Equiv <> c var
R18797:18802 Equiv <> cequiv def
R18828:18835 Coq.Init.Logic <> iff_refl thm
R18828:18835 Coq.Init.Logic <> iff_refl thm
prf 18851:18860 <> sym_cequiv
R18880:18882 Imp <> com ind
R18904:18909 Equiv <> cequiv def
R18914:18915 Equiv <> c1 var
R18911:18912 Equiv <> c2 var
R18888:18893 Equiv <> cequiv def
R18898:18899 Equiv <> c2 var
R18895:18896 Equiv <> c1 var
R18934:18939 Equiv <> cequiv def
R18989:18993 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18977:18979 Imp <> ::x_'/'_x_'\\'_x not
R18982:18985 Imp <> ::x_'/'_x_'\\'_x not
R18996:18998 Imp <> ::x_'/'_x_'\\'_x not
R19001:19004 Imp <> ::x_'/'_x_'\\'_x not
R18989:18993 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18977:18979 Imp <> ::x_'/'_x_'\\'_x not
R18982:18985 Imp <> ::x_'/'_x_'\\'_x not
R18996:18998 Imp <> ::x_'/'_x_'\\'_x not
R19001:19004 Imp <> ::x_'/'_x_'\\'_x not
R19065:19071 Coq.Init.Logic <> iff_sym thm
R19065:19071 Coq.Init.Logic <> iff_sym thm
prf 19098:19106 <> iff_trans
R19171:19175 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19169:19170 Equiv <> P1 var
R19176:19177 Equiv <> P3 var
R19156:19160 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19154:19155 Equiv <> P2 var
R19161:19162 Equiv <> P3 var
R19141:19145 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19139:19140 Equiv <> P1 var
R19146:19147 Equiv <> P2 var
prf 19344:19355 <> trans_cequiv
R19378:19380 Imp <> com ind
R19418:19423 Equiv <> cequiv def
R19428:19429 Equiv <> c3 var
R19425:19426 Equiv <> c1 var
R19402:19407 Equiv <> cequiv def
R19412:19413 Equiv <> c3 var
R19409:19410 Equiv <> c2 var
R19386:19391 Equiv <> cequiv def
R19396:19397 Equiv <> c2 var
R19393:19394 Equiv <> c1 var
R19448:19453 Equiv <> cequiv def
R19514:19516 Imp <> ::x_'/'_x_'\\'_x not
R19519:19522 Imp <> ::x_'/'_x_'\\'_x not
R19496:19504 Equiv <> iff_trans thm
R19514:19516 Imp <> ::x_'/'_x_'\\'_x not
R19519:19522 Imp <> ::x_'/'_x_'\\'_x not
R19496:19504 Equiv <> iff_trans thm
prf 20873:20887 <> CAss_congruence
R20929:20934 Equiv <> cequiv def
R20949:20952 Imp <> CAss constr
R20956:20958 Equiv <> a1' var
R20954:20954 Equiv <> i var
R20937:20940 Imp <> CAss constr
R20944:20945 Equiv <> a1 var
R20942:20942 Equiv <> i var
R20910:20915 Equiv <> aequiv def
R20920:20922 Equiv <> a1' var
R20917:20918 Equiv <> a1 var
R21071:21075 Imp <> E_Ass constr
R21071:21075 Imp <> E_Ass constr
R21157:21161 Imp <> E_Ass constr
R21157:21161 Imp <> E_Ass constr
prf 23013:23029 <> CWhile_congruence
R23093:23098 Equiv <> cequiv def
R23122:23127 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23131:23134 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23138:23141 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23128:23130 Equiv <> b1' var
R23135:23137 Equiv <> c1' var
R23101:23106 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23109:23112 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23115:23118 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23107:23108 Equiv <> b1 var
R23113:23114 Equiv <> c1 var
R23074:23079 Equiv <> cequiv def
R23084:23086 Equiv <> c1' var
R23081:23082 Equiv <> c1 var
R23057:23062 Equiv <> bequiv def
R23067:23069 Equiv <> b1' var
R23064:23065 Equiv <> b1 var
R23185:23190 Equiv <> bequiv def
R23192:23197 Equiv <> cequiv def
R23289:23294 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23297:23300 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23303:23306 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23289:23294 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23297:23300 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23303:23306 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23416:23425 Imp <> E_WhileEnd constr
R23416:23425 Imp <> E_WhileEnd constr
R23490:23500 Imp <> E_WhileLoop constr
R23490:23500 Imp <> E_WhileLoop constr
R23749:23754 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23758:23761 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23765:23768 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23749:23754 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23758:23761 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23765:23768 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23881:23890 Imp <> E_WhileEnd constr
R23881:23890 Imp <> E_WhileEnd constr
R23955:23965 Imp <> E_WhileLoop constr
R23955:23965 Imp <> E_WhileLoop constr
prf 24261:24275 <> CSeq_congruence
R24339:24344 Equiv <> cequiv def
R24359:24360 Imp <> ::x_';;'_x not
R24356:24358 Equiv <> c1' var
R24361:24363 Equiv <> c2' var
R24349:24350 Imp <> ::x_';;'_x not
R24347:24348 Equiv <> c1 var
R24351:24352 Equiv <> c2 var
R24320:24325 Equiv <> cequiv def
R24330:24332 Equiv <> c2' var
R24327:24328 Equiv <> c2 var
R24303:24308 Equiv <> cequiv def
R24313:24315 Equiv <> c1' var
R24310:24311 Equiv <> c1 var
prf 24472:24485 <> CIf_congruence
R24569:24574 Equiv <> cequiv def
R24604:24607 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24610:24615 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24619:24624 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24628:24630 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24608:24609 Equiv <> b' var
R24616:24618 Equiv <> c1' var
R24625:24627 Equiv <> c2' var
R24577:24580 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24582:24587 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24590:24595 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24598:24600 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24581:24581 Equiv <> b var
R24588:24589 Equiv <> c1 var
R24596:24597 Equiv <> c2 var
R24550:24555 Equiv <> cequiv def
R24560:24562 Equiv <> c2' var
R24557:24558 Equiv <> c2 var
R24533:24538 Equiv <> cequiv def
R24543:24545 Equiv <> c1' var
R24540:24541 Equiv <> c1 var
R24518:24523 Equiv <> bequiv def
R24527:24528 Equiv <> b' var
R24525:24525 Equiv <> b var
def 24785:24802 <> congruence_example
R24807:24812 Equiv <> cequiv def
R24995:25002 Imp <> ::x_';;'_x not
R24984:24988 Imp <> ::x_'::='_x not
R24983:24983 Imp <> X def
R24989:24992 Imp <> ANum constr
R25003:25007 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25028:25046 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25075:25118 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25132:25139 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25008:25010 Imp <> BEq constr
R25021:25024 Imp <> ANum constr
R25013:25015 Imp <> AId constr
R25017:25017 Imp <> X def
R25048:25052 Imp <> ::x_'::='_x not
R25047:25047 Imp <> Y def
R25053:25058 Imp <> AMinus constr
R25069:25071 Imp <> AId constr
R25073:25073 Imp <> X def
R25061:25063 Imp <> AId constr
R25065:25065 Imp <> X def
R25120:25124 Imp <> ::x_'::='_x not
R25119:25119 Imp <> Y def
R25125:25128 Imp <> ANum constr
R24852:24859 Imp <> ::x_';;'_x not
R24841:24845 Imp <> ::x_'::='_x not
R24840:24840 Imp <> X def
R24846:24849 Imp <> ANum constr
R24860:24864 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24885:24903 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24916:24933 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24947:24954 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24865:24867 Imp <> BEq constr
R24878:24881 Imp <> ANum constr
R24870:24872 Imp <> AId constr
R24874:24874 Imp <> X def
R24905:24909 Imp <> ::x_'::='_x not
R24904:24904 Imp <> Y def
R24910:24913 Imp <> ANum constr
R24935:24939 Imp <> ::x_'::='_x not
R24934:24934 Imp <> Y def
R24940:24943 Imp <> ANum constr
R25158:25172 Equiv <> CSeq_congruence prfax
R25158:25172 Equiv <> CSeq_congruence prfax
R25185:25195 Equiv <> refl_cequiv thm
R25185:25195 Equiv <> refl_cequiv thm
R25208:25221 Equiv <> CIf_congruence prfax
R25208:25221 Equiv <> CIf_congruence prfax
R25236:25246 Equiv <> refl_bequiv thm
R25236:25246 Equiv <> refl_bequiv thm
R25261:25275 Equiv <> CAss_congruence thm
R25261:25275 Equiv <> CAss_congruence thm
R25285:25290 Equiv <> aequiv def
R25324:25333 Coq.Arith.Minus <> minus_diag thm
R25324:25333 Coq.Arith.Minus <> minus_diag thm
R25348:25358 Equiv <> refl_cequiv thm
R25348:25358 Equiv <> refl_cequiv thm
def 25919:25930 <> atrans_sound
R25950:25953 Imp <> aexp ind
R25942:25945 Imp <> aexp ind
R25980:25983 Imp <> aexp ind
R25991:25996 Equiv <> aequiv def
R26001:26006 Equiv <> atrans var
R26008:26008 Equiv <> a var
R25998:25998 Equiv <> a var
def 26024:26035 <> btrans_sound
R26055:26058 Imp <> bexp ind
R26047:26050 Imp <> bexp ind
R26085:26088 Imp <> bexp ind
R26096:26101 Equiv <> bequiv def
R26106:26111 Equiv <> btrans var
R26113:26113 Equiv <> b var
R26103:26103 Equiv <> b var
def 26129:26140 <> ctrans_sound
R26159:26161 Imp <> com ind
R26152:26154 Imp <> com ind
R26188:26190 Imp <> com ind
R26198:26203 Equiv <> cequiv def
R26208:26213 Equiv <> ctrans var
R26215:26215 Equiv <> c var
R26205:26205 Equiv <> c var
def 26532:26550 <> fold_constants_aexp
R26557:26560 Imp <> aexp ind
R26565:26568 Imp <> aexp ind
R26581:26581 Equiv <> a var
R26592:26595 Imp <> ANum constr
R26608:26611 Imp <> ANum constr
R26619:26621 Imp <> AId constr
R26635:26637 Imp <> AId constr
R26645:26649 Imp <> APlus constr
R26673:26673 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26696:26697 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26720:26720 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26674:26692 Equiv <> fold_constants_aexp def
R26698:26716 Equiv <> fold_constants_aexp def
R26735:26735 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26743:26744 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26752:26752 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26736:26739 Imp <> ANum constr
R26745:26748 Imp <> ANum constr
R26757:26760 Imp <> ANum constr
R26765:26767 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R26780:26780 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26784:26785 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26789:26789 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26794:26798 Imp <> APlus constr
R26822:26827 Imp <> AMinus constr
R26850:26850 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26873:26874 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26897:26897 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26851:26869 Equiv <> fold_constants_aexp def
R26875:26893 Equiv <> fold_constants_aexp def
R26912:26912 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26920:26921 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26929:26929 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26913:26916 Imp <> ANum constr
R26922:26925 Imp <> ANum constr
R26934:26937 Imp <> ANum constr
R26942:26944 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R26957:26957 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26961:26962 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26966:26966 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26971:26976 Imp <> AMinus constr
R27000:27004 Imp <> AMult constr
R27028:27028 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27051:27052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27075:27075 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27029:27047 Equiv <> fold_constants_aexp def
R27053:27071 Equiv <> fold_constants_aexp def
R27090:27090 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27098:27099 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27107:27107 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27091:27094 Imp <> ANum constr
R27100:27103 Imp <> ANum constr
R27112:27115 Imp <> ANum constr
R27120:27122 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R27135:27135 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27139:27140 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27144:27144 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27149:27153 Imp <> AMult constr
def 27189:27201 <> fold_aexp_ex1
R27276:27280 Coq.Init.Logic <> :type_scope:x_'='_x not
R27209:27227 Equiv <> fold_constants_aexp def
R27236:27240 Imp <> AMult constr
R27269:27271 Imp <> AId constr
R27273:27273 Imp <> X def
R27243:27247 Imp <> APlus constr
R27259:27262 Imp <> ANum constr
R27250:27253 Imp <> ANum constr
R27281:27285 Imp <> AMult constr
R27297:27299 Imp <> AId constr
R27301:27301 Imp <> X def
R27288:27291 Imp <> ANum constr
def 27644:27656 <> fold_aexp_ex2
R27748:27752 Coq.Init.Logic <> :type_scope:x_'='_x not
R27664:27682 Equiv <> fold_constants_aexp def
R27691:27696 Imp <> AMinus constr
R27707:27711 Imp <> APlus constr
R27740:27742 Imp <> AId constr
R27744:27744 Imp <> Y def
R27714:27718 Imp <> AMult constr
R27730:27733 Imp <> ANum constr
R27721:27724 Imp <> ANum constr
R27699:27701 Imp <> AId constr
R27703:27703 Imp <> X def
R27753:27758 Imp <> AMinus constr
R27769:27773 Imp <> APlus constr
R27785:27787 Imp <> AId constr
R27789:27789 Imp <> Y def
R27776:27779 Imp <> ANum constr
R27761:27763 Imp <> AId constr
R27765:27765 Imp <> X def
def 28005:28023 <> fold_constants_bexp
R28030:28033 Imp <> bexp ind
R28038:28041 Imp <> bexp ind
R28054:28054 Equiv <> b var
R28065:28069 Imp <> BTrue constr
R28081:28085 Imp <> BTrue constr
R28091:28096 Imp <> BFalse constr
R28107:28112 Imp <> BFalse constr
R28118:28120 Imp <> BEq constr
R28144:28144 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28167:28168 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28191:28191 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28145:28163 Equiv <> fold_constants_aexp def
R28169:28187 Equiv <> fold_constants_aexp def
R28206:28206 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28214:28215 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28223:28223 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28207:28210 Imp <> ANum constr
R28216:28219 Imp <> ANum constr
R28231:28237 Coq.Arith.EqNat <> beq_nat def
R28261:28266 Imp <> BFalse constr
R28250:28254 Imp <> BTrue constr
R28276:28276 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28280:28281 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28285:28285 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28290:28292 Imp <> BEq constr
R28316:28318 Imp <> BLe constr
R28342:28342 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28365:28366 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28389:28389 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28343:28361 Equiv <> fold_constants_aexp def
R28367:28385 Equiv <> fold_constants_aexp def
R28404:28404 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28412:28413 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28421:28421 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28405:28408 Imp <> ANum constr
R28414:28417 Imp <> ANum constr
R28429:28431 Coq.Arith.Compare_dec <> leb def
R28455:28460 Imp <> BFalse constr
R28444:28448 Imp <> BTrue constr
R28470:28470 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28474:28475 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28479:28479 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28484:28486 Imp <> BLe constr
R28510:28513 Imp <> BNot constr
R28535:28553 Equiv <> fold_constants_bexp def
R28572:28576 Imp <> BTrue constr
R28581:28586 Imp <> BFalse constr
R28596:28601 Imp <> BFalse constr
R28606:28610 Imp <> BTrue constr
R28627:28630 Imp <> BNot constr
R28650:28653 Imp <> BAnd constr
R28677:28677 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28700:28701 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28724:28724 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28678:28696 Equiv <> fold_constants_bexp def
R28702:28720 Equiv <> fold_constants_bexp def
R28739:28739 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28745:28746 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28752:28752 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28740:28744 Imp <> BTrue constr
R28747:28751 Imp <> BTrue constr
R28757:28761 Imp <> BTrue constr
R28771:28771 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28777:28778 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28785:28785 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28772:28776 Imp <> BTrue constr
R28779:28784 Imp <> BFalse constr
R28790:28795 Imp <> BFalse constr
R28805:28805 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28812:28813 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28819:28819 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28806:28811 Imp <> BFalse constr
R28814:28818 Imp <> BTrue constr
R28824:28829 Imp <> BFalse constr
R28839:28839 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28846:28847 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28854:28854 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28840:28845 Imp <> BFalse constr
R28848:28853 Imp <> BFalse constr
R28859:28864 Imp <> BFalse constr
R28874:28874 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28878:28879 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28883:28883 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28888:28891 Imp <> BAnd constr
def 28927:28939 <> fold_bexp_ex1
R29006:29010 Coq.Init.Logic <> :type_scope:x_'='_x not
R28947:28965 Equiv <> fold_constants_bexp def
R28968:28971 Imp <> BAnd constr
R28980:28983 Imp <> BNot constr
R28986:28989 Imp <> BAnd constr
R28998:29002 Imp <> BTrue constr
R28991:28996 Imp <> BFalse constr
R28973:28977 Imp <> BTrue constr
R29011:29015 Imp <> BTrue constr
def 29052:29064 <> fold_bexp_ex2
R29214:29218 Coq.Init.Logic <> :type_scope:x_'='_x not
R29072:29090 Equiv <> fold_constants_bexp def
R29099:29102 Imp <> BAnd constr
R29139:29141 Imp <> BEq constr
R29170:29175 Imp <> AMinus constr
R29187:29191 Imp <> APlus constr
R29203:29206 Imp <> ANum constr
R29194:29197 Imp <> ANum constr
R29178:29181 Imp <> ANum constr
R29144:29147 Imp <> ANum constr
R29105:29107 Imp <> BEq constr
R29118:29120 Imp <> AId constr
R29122:29122 Imp <> Y def
R29110:29112 Imp <> AId constr
R29114:29114 Imp <> X def
R29219:29222 Imp <> BAnd constr
R29246:29250 Imp <> BTrue constr
R29225:29227 Imp <> BEq constr
R29238:29240 Imp <> AId constr
R29242:29242 Imp <> Y def
R29230:29232 Imp <> AId constr
R29234:29234 Imp <> X def
def 29404:29421 <> fold_constants_com
R29428:29430 Imp <> com ind
R29435:29437 Imp <> com ind
R29450:29450 Equiv <> c var
R29461:29464 Imp <> ::'SKIP' not
R29480:29483 Imp <> ::'SKIP' not
R29490:29494 Imp <> ::x_'::='_x not
R29507:29510 Imp <> CAss constr
R29515:29533 Equiv <> fold_constants_aexp def
R29544:29547 Imp <> ::x_';;'_x not
R29561:29561 Imp <> ::x_';;'_x not
R29583:29588 Imp <> ::x_';;'_x not
R29610:29610 Imp <> ::x_';;'_x not
R29562:29579 Equiv <> fold_constants_com def
R29589:29606 Equiv <> fold_constants_com def
R29616:29619 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29621:29626 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29629:29634 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29637:29639 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29656:29674 Equiv <> fold_constants_bexp def
R29691:29695 Imp <> BTrue constr
R29700:29717 Equiv <> fold_constants_com def
R29730:29735 Imp <> BFalse constr
R29740:29757 Equiv <> fold_constants_com def
R29776:29779 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29782:29787 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29809:29835 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29857:29859 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29788:29805 Equiv <> fold_constants_com def
R29836:29853 Equiv <> fold_constants_com def
R29875:29880 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29882:29885 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29887:29890 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29907:29925 Equiv <> fold_constants_bexp def
R29942:29946 Imp <> BTrue constr
R29951:29956 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29962:29965 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29970:29973 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29957:29961 Imp <> BTrue constr
R29966:29969 Imp <> ::'SKIP' not
R29983:29988 Imp <> BFalse constr
R29993:29996 Imp <> ::'SKIP' not
R30012:30017 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30020:30024 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30045:30049 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30025:30042 Equiv <> fold_constants_com def
R30044:30044 Equiv <> c var
def 30077:30088 <> fold_com_ex1
R30539:30578 Coq.Init.Logic <> :type_scope:x_'='_x not
R30836:30836 Coq.Init.Logic <> :type_scope:x_'='_x not
R30094:30111 Equiv <> fold_constants_com def
R30175:30182 Imp <> ::x_';;'_x not
R30147:30151 Imp <> ::x_'::='_x not
R30146:30146 Imp <> X def
R30152:30156 Imp <> APlus constr
R30168:30171 Imp <> ANum constr
R30159:30162 Imp <> ANum constr
R30212:30219 Imp <> ::x_';;'_x not
R30184:30188 Imp <> ::x_'::='_x not
R30183:30183 Imp <> Y def
R30189:30194 Imp <> AMinus constr
R30205:30208 Imp <> ANum constr
R30197:30199 Imp <> AId constr
R30201:30201 Imp <> X def
R30333:30340 Imp <> ::x_';;'_x not
R30220:30223 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30278:30290 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30295:30312 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30325:30332 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30224:30226 Imp <> BEq constr
R30254:30258 Imp <> APlus constr
R30270:30273 Imp <> ANum constr
R30261:30264 Imp <> ANum constr
R30229:30234 Imp <> AMinus constr
R30245:30247 Imp <> AId constr
R30249:30249 Imp <> Y def
R30237:30239 Imp <> AId constr
R30241:30241 Imp <> X def
R30291:30294 Imp <> ::'SKIP' not
R30314:30318 Imp <> ::x_'::='_x not
R30313:30313 Imp <> Y def
R30319:30322 Imp <> ANum constr
R30456:30463 Imp <> ::x_';;'_x not
R30341:30344 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30401:30413 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30426:30443 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30448:30455 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30345:30347 Imp <> BLe constr
R30359:30364 Imp <> AMinus constr
R30376:30380 Imp <> APlus constr
R30392:30395 Imp <> ANum constr
R30383:30386 Imp <> ANum constr
R30367:30370 Imp <> ANum constr
R30350:30353 Imp <> ANum constr
R30415:30419 Imp <> ::x_'::='_x not
R30414:30414 Imp <> Y def
R30420:30423 Imp <> ANum constr
R30444:30447 Imp <> ::'SKIP' not
R30464:30469 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30490:30500 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30529:30537 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30470:30472 Imp <> BEq constr
R30483:30486 Imp <> ANum constr
R30475:30477 Imp <> AId constr
R30479:30479 Imp <> Y def
R30502:30506 Imp <> ::x_'::='_x not
R30501:30501 Imp <> X def
R30507:30511 Imp <> APlus constr
R30522:30525 Imp <> ANum constr
R30514:30516 Imp <> AId constr
R30518:30518 Imp <> X def
R30591:30598 Imp <> ::x_';;'_x not
R30580:30584 Imp <> ::x_'::='_x not
R30579:30579 Imp <> X def
R30585:30588 Imp <> ANum constr
R30628:30635 Imp <> ::x_';;'_x not
R30600:30604 Imp <> ::x_'::='_x not
R30599:30599 Imp <> Y def
R30605:30610 Imp <> AMinus constr
R30621:30624 Imp <> ANum constr
R30613:30615 Imp <> AId constr
R30617:30617 Imp <> X def
R30734:30741 Imp <> ::x_';;'_x not
R30636:30639 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30677:30689 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30694:30712 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30725:30733 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30640:30642 Imp <> BEq constr
R30670:30673 Imp <> ANum constr
R30645:30650 Imp <> AMinus constr
R30661:30663 Imp <> AId constr
R30665:30665 Imp <> Y def
R30653:30655 Imp <> AId constr
R30657:30657 Imp <> X def
R30690:30693 Imp <> ::'SKIP' not
R30714:30718 Imp <> ::x_'::='_x not
R30713:30713 Imp <> Y def
R30719:30722 Imp <> ANum constr
R30754:30761 Imp <> ::x_';;'_x not
R30743:30747 Imp <> ::x_'::='_x not
R30742:30742 Imp <> Y def
R30748:30751 Imp <> ANum constr
R30762:30767 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30788:30798 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30827:30835 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30768:30770 Imp <> BEq constr
R30781:30784 Imp <> ANum constr
R30773:30775 Imp <> AId constr
R30777:30777 Imp <> Y def
R30800:30804 Imp <> ::x_'::='_x not
R30799:30799 Imp <> X def
R30805:30809 Imp <> APlus constr
R30820:30823 Imp <> ANum constr
R30812:30814 Imp <> AId constr
R30816:30816 Imp <> X def
prf 31086:31110 <> fold_constants_aexp_sound
R31116:31127 Equiv <> atrans_sound def
R31129:31147 Equiv <> fold_constants_aexp def
R31166:31177 Equiv <> atrans_sound def
R31197:31202 Equiv <> aequiv def
R31611:31629 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31611:31629 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31611:31629 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31611:31629 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
R31655:31673 Equiv <> fold_constants_aexp def
prf 34595:34619 <> fold_constants_bexp_sound
R34624:34635 Equiv <> btrans_sound def
R34637:34655 Equiv <> fold_constants_bexp def
R34674:34685 Equiv <> btrans_sound def
R34705:34710 Equiv <> bequiv def
R35200:35218 Equiv <> fold_constants_aexp def
R35200:35218 Equiv <> fold_constants_aexp def
R35257:35275 Equiv <> fold_constants_aexp def
R35257:35275 Equiv <> fold_constants_aexp def
R35313:35317 Imp <> aeval def
R35332:35336 Imp <> aeval def
R35379:35403 Equiv <> fold_constants_aexp_sound thm
R35332:35336 Imp <> aeval def
R35313:35317 Imp <> aeval def
R35379:35403 Equiv <> fold_constants_aexp_sound thm
R35433:35437 Imp <> aeval def
R35452:35456 Imp <> aeval def
R35499:35523 Equiv <> fold_constants_aexp_sound thm
R35452:35456 Imp <> aeval def
R35433:35437 Imp <> aeval def
R35499:35523 Equiv <> fold_constants_aexp_sound thm
R35713:35719 Coq.Arith.EqNat <> beq_nat def
R35713:35719 Coq.Arith.EqNat <> beq_nat def
R35821:35839 Equiv <> fold_constants_bexp def
R35821:35839 Equiv <> fold_constants_bexp def
R35948:35966 Equiv <> fold_constants_bexp def
R35948:35966 Equiv <> fold_constants_bexp def
R36005:36023 Equiv <> fold_constants_bexp def
R36005:36023 Equiv <> fold_constants_bexp def
prf 36289:36312 <> fold_constants_com_sound
R36318:36329 Equiv <> ctrans_sound def
R36331:36348 Equiv <> fold_constants_com def
R36367:36378 Equiv <> ctrans_sound def
R36434:36444 Equiv <> refl_cequiv thm
R36434:36444 Equiv <> refl_cequiv thm
R36467:36481 Equiv <> CAss_congruence thm
R36467:36481 Equiv <> CAss_congruence thm
R36490:36514 Equiv <> fold_constants_aexp_sound thm
R36490:36514 Equiv <> fold_constants_aexp_sound thm
R36536:36550 Equiv <> CSeq_congruence prfax
R36536:36550 Equiv <> CSeq_congruence prfax
R36591:36596 Equiv <> bequiv def
R36601:36619 Equiv <> fold_constants_bexp def
R36591:36596 Equiv <> bequiv def
R36601:36619 Equiv <> fold_constants_bexp def
R36660:36684 Equiv <> fold_constants_bexp_sound prfax
R36660:36684 Equiv <> fold_constants_bexp_sound prfax
R36703:36721 Equiv <> fold_constants_bexp def
R36895:36908 Equiv <> CIf_congruence prfax
R36703:36721 Equiv <> fold_constants_bexp def
R36895:36908 Equiv <> CIf_congruence prfax
R36895:36908 Equiv <> CIf_congruence prfax
R36895:36908 Equiv <> CIf_congruence prfax
R36895:36908 Equiv <> CIf_congruence prfax
R36895:36908 Equiv <> CIf_congruence prfax
R36895:36908 Equiv <> CIf_congruence prfax
R36962:36973 Equiv <> trans_cequiv thm
R36962:36973 Equiv <> trans_cequiv thm
R37012:37019 Equiv <> IFB_true thm
R37012:37019 Equiv <> IFB_true thm
R37073:37084 Equiv <> trans_cequiv thm
R37073:37084 Equiv <> trans_cequiv thm
R37123:37131 Equiv <> IFB_false prfax
R37123:37131 Equiv <> IFB_false prfax
def 39558:39567 <> subst_aexp
R39574:39575 Maps <> id ind
R39583:39586 Imp <> aexp ind
R39594:39597 Imp <> aexp ind
R39602:39605 Imp <> aexp ind
R39618:39618 Equiv <> a var
R39629:39632 Imp <> ANum constr
R39645:39648 Imp <> ANum constr
R39656:39658 Imp <> AId constr
R39675:39680 Maps <> beq_id def
R39682:39682 Equiv <> i var
R39699:39701 Imp <> AId constr
R39692:39692 Equiv <> u var
R39710:39714 Imp <> APlus constr
R39726:39730 Imp <> APlus constr
R39753:39762 Equiv <> subst_aexp def
R39766:39766 Equiv <> u var
R39764:39764 Equiv <> i var
R39733:39742 Equiv <> subst_aexp def
R39746:39746 Equiv <> u var
R39744:39744 Equiv <> i var
R39776:39781 Imp <> AMinus constr
R39792:39797 Imp <> AMinus constr
R39820:39829 Equiv <> subst_aexp def
R39833:39833 Equiv <> u var
R39831:39831 Equiv <> i var
R39800:39809 Equiv <> subst_aexp def
R39813:39813 Equiv <> u var
R39811:39811 Equiv <> i var
R39843:39847 Imp <> AMult constr
R39859:39863 Imp <> AMult constr
R39886:39895 Equiv <> subst_aexp def
R39899:39899 Equiv <> u var
R39897:39897 Equiv <> i var
R39866:39875 Equiv <> subst_aexp def
R39879:39879 Equiv <> u var
R39877:39877 Equiv <> i var
def 39921:39933 <> subst_aexp_ex
R40003:40008 Coq.Init.Logic <> :type_scope:x_'='_x not
R40050:40050 Coq.Init.Logic <> :type_scope:x_'='_x not
R39939:39948 Equiv <> subst_aexp def
R39981:39985 Imp <> APlus constr
R39996:39998 Imp <> AId constr
R40000:40000 Imp <> X def
R39988:39990 Imp <> AId constr
R39992:39992 Imp <> Y def
R39953:39957 Imp <> APlus constr
R39970:39973 Imp <> ANum constr
R39960:39963 Imp <> ANum constr
R39950:39950 Imp <> X def
R40009:40013 Imp <> APlus constr
R40024:40028 Imp <> APlus constr
R40041:40044 Imp <> ANum constr
R40031:40034 Imp <> ANum constr
R40016:40018 Imp <> AId constr
R40020:40020 Imp <> Y def
def 40246:40265 <> subst_equiv_property
R40292:40297 Equiv <> cequiv def
R40342:40344 Imp <> ::x_';;'_x not
R40335:40339 Imp <> ::x_'::='_x not
R40333:40334 Equiv <> i1 var
R40340:40341 Equiv <> a1 var
R40347:40351 Imp <> ::x_'::='_x not
R40345:40346 Equiv <> i2 var
R40352:40361 Equiv <> subst_aexp def
R40369:40370 Equiv <> a2 var
R40366:40367 Equiv <> a1 var
R40363:40364 Equiv <> i1 var
R40309:40311 Imp <> ::x_';;'_x not
R40302:40306 Imp <> ::x_'::='_x not
R40300:40301 Equiv <> i1 var
R40307:40308 Equiv <> a1 var
R40314:40318 Imp <> ::x_'::='_x not
R40312:40313 Equiv <> i2 var
R40319:40320 Equiv <> a2 var
prf 41608:41620 <> subst_inequiv
R41626:41627 Coq.Init.Logic <> :type_scope:'~'_x not
R41628:41647 Equiv <> subst_equiv_property def
R41666:41685 Equiv <> subst_equiv_property def
R41896:41910 Imp <> ::x_';;'_x not
R41869:41873 Imp <> ::x_'::='_x not
R41868:41868 Imp <> X def
R41874:41878 Imp <> APlus constr
R41889:41892 Imp <> ANum constr
R41881:41883 Imp <> AId constr
R41885:41885 Imp <> X def
R41912:41916 Imp <> ::x_'::='_x not
R41911:41911 Imp <> Y def
R41917:41919 Imp <> AId constr
R41921:41921 Imp <> X def
R41896:41910 Imp <> ::x_';;'_x not
R41869:41873 Imp <> ::x_'::='_x not
R41868:41868 Imp <> X def
R41874:41878 Imp <> APlus constr
R41889:41892 Imp <> ANum constr
R41881:41883 Imp <> AId constr
R41885:41885 Imp <> X def
R41912:41916 Imp <> ::x_'::='_x not
R41911:41911 Imp <> Y def
R41917:41919 Imp <> AId constr
R41921:41921 Imp <> X def
R41977:41991 Imp <> ::x_';;'_x not
R41950:41954 Imp <> ::x_'::='_x not
R41949:41949 Imp <> X def
R41955:41959 Imp <> APlus constr
R41970:41973 Imp <> ANum constr
R41962:41964 Imp <> AId constr
R41966:41966 Imp <> X def
R41993:41997 Imp <> ::x_'::='_x not
R41992:41992 Imp <> Y def
R41998:42002 Imp <> APlus constr
R42013:42016 Imp <> ANum constr
R42005:42007 Imp <> AId constr
R42009:42009 Imp <> X def
R41977:41991 Imp <> ::x_';;'_x not
R41950:41954 Imp <> ::x_'::='_x not
R41949:41949 Imp <> X def
R41955:41959 Imp <> APlus constr
R41970:41973 Imp <> ANum constr
R41962:41964 Imp <> AId constr
R41966:41966 Imp <> X def
R41993:41997 Imp <> ::x_'::='_x not
R41992:41992 Imp <> Y def
R41998:42002 Imp <> APlus constr
R42013:42016 Imp <> ANum constr
R42005:42007 Imp <> AId constr
R42009:42009 Imp <> X def
R42045:42050 Equiv <> cequiv def
R42045:42050 Equiv <> cequiv def
R42267:42274 Maps <> t_update def
R42303:42303 Imp <> Y def
R42277:42284 Maps <> t_update def
R42298:42298 Imp <> X def
R42286:42296 Imp <> empty_state def
R42267:42274 Maps <> t_update def
R42303:42303 Imp <> Y def
R42277:42284 Maps <> t_update def
R42298:42298 Imp <> X def
R42286:42296 Imp <> empty_state def
R42328:42335 Maps <> t_update def
R42364:42364 Imp <> Y def
R42338:42345 Maps <> t_update def
R42359:42359 Imp <> X def
R42347:42357 Imp <> empty_state def
R42328:42335 Maps <> t_update def
R42364:42364 Imp <> Y def
R42338:42345 Maps <> t_update def
R42359:42359 Imp <> X def
R42347:42357 Imp <> empty_state def
R42393:42395 Imp <> ::x_'/'_x_'\\'_x not
R42407:42410 Imp <> ::x_'/'_x_'\\'_x not
R42396:42406 Imp <> empty_state def
R42433:42435 Imp <> ::x_'/'_x_'\\'_x not
R42447:42450 Imp <> ::x_'/'_x_'\\'_x not
R42436:42446 Imp <> empty_state def
R42504:42511 Maps <> t_update def
R42525:42525 Imp <> X def
R42513:42523 Imp <> empty_state def
R42484:42488 Imp <> E_Seq constr
R42545:42549 Imp <> E_Ass constr
R42393:42395 Imp <> ::x_'/'_x_'\\'_x not
R42407:42410 Imp <> ::x_'/'_x_'\\'_x not
R42396:42406 Imp <> empty_state def
R42433:42435 Imp <> ::x_'/'_x_'\\'_x not
R42447:42450 Imp <> ::x_'/'_x_'\\'_x not
R42436:42446 Imp <> empty_state def
R42433:42435 Imp <> ::x_'/'_x_'\\'_x not
R42447:42450 Imp <> ::x_'/'_x_'\\'_x not
R42436:42446 Imp <> empty_state def
R42504:42511 Maps <> t_update def
R42525:42525 Imp <> X def
R42513:42523 Imp <> empty_state def
R42484:42488 Imp <> E_Seq constr
R42545:42549 Imp <> E_Ass constr
R42545:42549 Imp <> E_Ass constr
R42504:42511 Maps <> t_update def
R42525:42525 Imp <> X def
R42513:42523 Imp <> empty_state def
R42484:42488 Imp <> E_Seq constr
R42545:42549 Imp <> E_Ass constr
R42545:42549 Imp <> E_Ass constr
R42504:42511 Maps <> t_update def
R42525:42525 Imp <> X def
R42513:42523 Imp <> empty_state def
R42484:42488 Imp <> E_Seq constr
R42545:42549 Imp <> E_Ass constr
R42545:42549 Imp <> E_Ass constr
R42504:42511 Maps <> t_update def
R42525:42525 Imp <> X def
R42513:42523 Imp <> empty_state def
R42484:42488 Imp <> E_Seq constr
R42704:42706 Coq.Init.Logic <> :type_scope:x_'='_x not
R42727:42745 Imp <> ceval_deterministic thm
R42750:42760 Imp <> empty_state def
R42704:42706 Coq.Init.Logic <> :type_scope:x_'='_x not
R42727:42745 Imp <> ceval_deterministic thm
R42750:42760 Imp <> empty_state def
R42802:42804 Coq.Init.Logic <> :type_scope:x_'='_x not
R42801:42801 Imp <> Y def
R42809:42809 Imp <> Y def
R42802:42804 Coq.Init.Logic <> :type_scope:x_'='_x not
R42801:42801 Imp <> Y def
R42809:42809 Imp <> Y def
ind 43217:43236 <> var_not_used_in_aexp
constr 43267:43272 <> VNUNum
constr 43321:43325 <> VNUId
constr 43383:43389 <> VNUPlus
constr 43523:43530 <> VNUMinus
constr 43665:43671 <> VNUMult
R43241:43242 Maps <> id ind
R43247:43250 Imp <> aexp ind
R43285:43304 Equiv <> var_not_used_in_aexp ind
R43309:43312 Imp <> ANum constr
R43314:43314 Equiv <> n var
R43348:43367 Equiv <> var_not_used_in_aexp ind
R43372:43374 Imp <> AId constr
R43376:43376 Equiv <> Y var
R43339:43342 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R43343:43343 Equiv <> Y var
R43482:43501 Equiv <> var_not_used_in_aexp ind
R43506:43510 Imp <> APlus constr
R43515:43516 Equiv <> a2 var
R43512:43513 Equiv <> a1 var
R43447:43466 Equiv <> var_not_used_in_aexp ind
R43470:43471 Equiv <> a2 var
R43412:43431 Equiv <> var_not_used_in_aexp ind
R43435:43436 Equiv <> a1 var
R43623:43642 Equiv <> var_not_used_in_aexp ind
R43647:43652 Imp <> AMinus constr
R43657:43658 Equiv <> a2 var
R43654:43655 Equiv <> a1 var
R43588:43607 Equiv <> var_not_used_in_aexp ind
R43611:43612 Equiv <> a2 var
R43553:43572 Equiv <> var_not_used_in_aexp ind
R43576:43577 Equiv <> a1 var
R43764:43783 Equiv <> var_not_used_in_aexp ind
R43788:43792 Imp <> AMult constr
R43797:43798 Equiv <> a2 var
R43794:43795 Equiv <> a1 var
R43729:43748 Equiv <> var_not_used_in_aexp ind
R43752:43753 Equiv <> a2 var
R43694:43713 Equiv <> var_not_used_in_aexp ind
R43717:43718 Equiv <> a1 var
prf 43809:43823 <> aeval_weakening
R43903:43905 Coq.Init.Logic <> :type_scope:x_'='_x not
R43877:43881 Imp <> aeval def
R43902:43902 Equiv <> a var
R43884:43891 Maps <> t_update def
R43898:43899 Equiv <> ni var
R43896:43896 Equiv <> i var
R43893:43894 Equiv <> st var
R43906:43910 Imp <> aeval def
R43915:43915 Equiv <> a var
R43912:43913 Equiv <> st var
R43847:43866 Equiv <> var_not_used_in_aexp ind
R43870:43870 Equiv <> a var
R43868:43868 Equiv <> i var
prf 44225:44240 <> inequiv_exercise
R44245:44246 Coq.Init.Logic <> :type_scope:'~'_x not
R44247:44252 Equiv <> cequiv def
R44280:44283 Imp <> ::'SKIP' not
R44255:44260 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44266:44269 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44274:44277 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R44261:44265 Imp <> BTrue constr
R44270:44273 Imp <> ::'SKIP' not
mod 46313:46316 <> Himp
ind 46421:46423 Himp com
constr 46439:46443 Himp CSkip
constr 46455:46458 Himp CAss
constr 46484:46487 Himp CSeq
constr 46513:46515 Himp CIf
constr 46549:46554 Himp CWhile
constr 46581:46586 Himp CHavoc
R46447:46449 Equiv <> com ind
R46476:46478 Equiv <> com ind
R46468:46471 Imp <> aexp ind
R46462:46463 Maps <> id ind
R46505:46507 Equiv <> com ind
R46498:46500 Equiv <> com ind
R46491:46493 Equiv <> com ind
R46541:46543 Equiv <> com ind
R46534:46536 Equiv <> com ind
R46527:46529 Equiv <> com ind
R46519:46522 Imp <> bexp ind
R46573:46575 Equiv <> com ind
R46566:46568 Equiv <> com ind
R46558:46561 Imp <> bexp ind
R46596:46598 Equiv <> com ind
R46590:46591 Maps <> id ind
R46656:46660 Equiv Himp CSkip constr
not 46642 Himp ::'SKIP'
R46690:46693 Equiv Himp CAss constr
not 46672 Himp ::x_'::='_x
R46741:46744 Equiv Himp CSeq constr
not 46724 Himp ::x_';;'_x
R46829:46834 Equiv Himp CWhile constr
not 46798 Himp ::'WHILE'_x_'DO'_x_'END'
R46928:46930 Equiv Himp CIf constr
not 46886 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R47003:47008 Equiv Himp CHavoc constr
not 46987 Himp ::'HAVOC'_x
ind 47419:47423 Himp ceval
constr 47464:47469 Himp E_Skip
constr 47512:47516 Himp E_Ass
constr 47642:47646 Himp E_Seq
constr 47772:47779 Himp E_IfTrue
constr 47948:47956 Himp E_IfFalse
constr 48128:48137 Himp E_WhileEnd
constr 48261:48271 Himp E_WhileLoop
R47443:47447 Imp <> state def
R47434:47438 Imp <> state def
R47427:47429 Equiv Himp com ind
R48565:48569 Equiv <> ceval ind
R47485:47489 Imp <> state def
R47496:47498 Equiv Himp ::x_'/'_x_'\\'_x not
R47501:47504 Equiv Himp ::x_'/'_x_'\\'_x not
R47492:47495 Equiv Himp ::'SKIP' not
R47499:47500 Equiv <> st var
R47505:47506 Equiv <> st var
R47533:47537 Imp <> state def
R47546:47549 Imp <> aexp ind
R47557:47559 Coq.Init.Datatypes <> nat ind
R47567:47568 Maps <> id ind
R47603:47603 Equiv Himp ::x_'/'_x_'\\'_x not
R47612:47615 Equiv Himp ::x_'/'_x_'\\'_x not
R47618:47621 Equiv Himp ::x_'/'_x_'\\'_x not
R47605:47609 Equiv Himp ::x_'::='_x not
R47604:47604 Equiv <> X var
R47610:47611 Equiv <> a1 var
R47616:47617 Equiv <> st var
R47622:47629 Maps <> t_update def
R47636:47636 Equiv <> n var
R47634:47634 Equiv <> X var
R47631:47632 Equiv <> st var
R47595:47597 Coq.Init.Logic <> :type_scope:x_'='_x not
R47584:47588 Imp <> aeval def
R47593:47594 Equiv <> a1 var
R47590:47591 Equiv <> st var
R47598:47598 Equiv <> n var
R47666:47668 Equiv Himp com ind
R47686:47690 Imp <> state def
R47744:47744 Equiv Himp ::x_'/'_x_'\\'_x not
R47753:47756 Equiv Himp ::x_'/'_x_'\\'_x not
R47759:47762 Equiv Himp ::x_'/'_x_'\\'_x not
R47747:47750 Equiv Himp ::x_';;'_x not
R47745:47746 Equiv <> c1 var
R47751:47752 Equiv <> c2 var
R47757:47758 Equiv <> st var
R47763:47766 Equiv <> st'' var
R47726:47728 Equiv Himp ::x_'/'_x_'\\'_x not
R47732:47735 Equiv Himp ::x_'/'_x_'\\'_x not
R47724:47725 Equiv <> c2 var
R47729:47731 Equiv <> st' var
R47736:47739 Equiv <> st'' var
R47708:47710 Equiv Himp ::x_'/'_x_'\\'_x not
R47713:47716 Equiv Himp ::x_'/'_x_'\\'_x not
R47706:47707 Equiv <> c1 var
R47711:47712 Equiv <> st var
R47717:47719 Equiv <> st' var
R47800:47804 Imp <> state def
R47813:47816 Imp <> bexp ind
R47828:47830 Equiv Himp com ind
R47904:47904 Equiv Himp ::x_'/'_x_'\\'_x not
R47930:47933 Equiv Himp ::x_'/'_x_'\\'_x not
R47936:47939 Equiv Himp ::x_'/'_x_'\\'_x not
R47905:47908 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47911:47916 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47919:47924 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47927:47929 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R47909:47910 Equiv <> b1 var
R47917:47918 Equiv <> c1 var
R47925:47926 Equiv <> c2 var
R47934:47935 Equiv <> st var
R47940:47942 Equiv <> st' var
R47888:47890 Equiv Himp ::x_'/'_x_'\\'_x not
R47893:47896 Equiv Himp ::x_'/'_x_'\\'_x not
R47886:47887 Equiv <> c1 var
R47891:47892 Equiv <> st var
R47897:47899 Equiv <> st' var
R47860:47862 Coq.Init.Logic <> :type_scope:x_'='_x not
R47849:47853 Imp <> beval def
R47858:47859 Equiv <> b1 var
R47855:47856 Equiv <> st var
R47863:47866 Coq.Init.Datatypes <> true constr
R47977:47981 Imp <> state def
R47990:47993 Imp <> bexp ind
R48005:48007 Equiv Himp com ind
R48084:48084 Equiv Himp ::x_'/'_x_'\\'_x not
R48110:48113 Equiv Himp ::x_'/'_x_'\\'_x not
R48116:48119 Equiv Himp ::x_'/'_x_'\\'_x not
R48085:48088 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48091:48096 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48099:48104 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48107:48109 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R48089:48090 Equiv <> b1 var
R48097:48098 Equiv <> c1 var
R48105:48106 Equiv <> c2 var
R48114:48115 Equiv <> st var
R48120:48122 Equiv <> st' var
R48068:48070 Equiv Himp ::x_'/'_x_'\\'_x not
R48073:48076 Equiv Himp ::x_'/'_x_'\\'_x not
R48066:48067 Equiv <> c2 var
R48071:48072 Equiv <> st var
R48077:48079 Equiv <> st' var
R48038:48040 Coq.Init.Logic <> :type_scope:x_'='_x not
R48027:48031 Imp <> beval def
R48036:48037 Equiv <> b1 var
R48033:48034 Equiv <> st var
R48041:48045 Coq.Init.Datatypes <> false constr
R48154:48157 Imp <> bexp ind
R48166:48170 Imp <> state def
R48179:48181 Equiv Himp com ind
R48225:48225 Equiv Himp ::x_'/'_x_'\\'_x not
R48244:48247 Equiv Himp ::x_'/'_x_'\\'_x not
R48250:48253 Equiv Himp ::x_'/'_x_'\\'_x not
R48226:48231 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48234:48237 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48240:48243 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48232:48233 Equiv <> b1 var
R48238:48239 Equiv <> c1 var
R48248:48249 Equiv <> st var
R48254:48255 Equiv <> st var
R48213:48215 Coq.Init.Logic <> :type_scope:x_'='_x not
R48202:48206 Imp <> beval def
R48211:48212 Equiv <> b1 var
R48208:48209 Equiv <> st var
R48216:48220 Coq.Init.Datatypes <> false constr
R48297:48301 Imp <> state def
R48310:48313 Imp <> bexp ind
R48322:48324 Equiv Himp com ind
R48478:48478 Equiv Himp ::x_'/'_x_'\\'_x not
R48497:48500 Equiv Himp ::x_'/'_x_'\\'_x not
R48503:48506 Equiv Himp ::x_'/'_x_'\\'_x not
R48479:48484 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48487:48490 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48493:48496 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48485:48486 Equiv <> b1 var
R48491:48492 Equiv <> c1 var
R48501:48502 Equiv <> st var
R48507:48510 Equiv <> st'' var
R48422:48422 Equiv Himp ::x_'/'_x_'\\'_x not
R48441:48444 Equiv Himp ::x_'/'_x_'\\'_x not
R48448:48451 Equiv Himp ::x_'/'_x_'\\'_x not
R48423:48428 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48431:48434 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48437:48440 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48429:48430 Equiv <> b1 var
R48435:48436 Equiv <> c1 var
R48445:48447 Equiv <> st' var
R48452:48455 Equiv <> st'' var
R48388:48390 Equiv Himp ::x_'/'_x_'\\'_x not
R48393:48396 Equiv Himp ::x_'/'_x_'\\'_x not
R48386:48387 Equiv <> c1 var
R48391:48392 Equiv <> st var
R48397:48399 Equiv <> st' var
R48357:48359 Coq.Init.Logic <> :type_scope:x_'='_x not
R48346:48350 Imp <> beval def
R48355:48356 Equiv <> b1 var
R48352:48353 Equiv <> st var
R48360:48363 Coq.Init.Datatypes <> true constr
R48565:48569 Equiv Himp ceval ind
not 48540 Himp ::x_'/'_x_'\\'_x
def 48683:48696 Himp havoc_example1
R48700:48700 Equiv Himp ::x_'/'_x_'\\'_x not
R48708:48711 Equiv Himp ::x_'/'_x_'\\'_x not
R48723:48726 Equiv Himp ::x_'/'_x_'\\'_x not
R48701:48706 Equiv Himp ::'HAVOC'_x not
R48707:48707 Imp <> X def
R48712:48722 Imp <> empty_state def
R48727:48734 Maps <> t_update def
R48748:48748 Imp <> X def
R48736:48746 Imp <> empty_state def
def 48798:48811 Himp havoc_example2
R48817:48817 Equiv Himp ::x_'/'_x_'\\'_x not
R48832:48835 Equiv Himp ::x_'/'_x_'\\'_x not
R48847:48850 Equiv Himp ::x_'/'_x_'\\'_x not
R48822:48824 Equiv Himp ::x_';;'_x not
R48818:48821 Equiv Himp ::'SKIP' not
R48825:48830 Equiv Himp ::'HAVOC'_x not
R48831:48831 Imp <> Z def
R48836:48846 Imp <> empty_state def
R48851:48858 Maps <> t_update def
R48872:48872 Imp <> Z def
R48860:48870 Imp <> empty_state def
def 49013:49018 Himp cequiv
R49029:49031 Equiv Himp com ind
R49060:49064 Imp <> state def
R49083:49087 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R49071:49073 Equiv Himp ::x_'/'_x_'\\'_x not
R49076:49079 Equiv Himp ::x_'/'_x_'\\'_x not
R49069:49070 Equiv <> c1 var
R49074:49075 Equiv <> st var
R49080:49082 Equiv <> st' var
R49090:49092 Equiv Himp ::x_'/'_x_'\\'_x not
R49095:49098 Equiv Himp ::x_'/'_x_'\\'_x not
R49088:49089 Equiv <> c2 var
R49093:49094 Equiv <> st var
R49099:49101 Equiv <> st' var
def 49402:49404 Himp pXY
R49418:49420 Equiv Himp ::x_';;'_x not
R49411:49416 Equiv Himp ::'HAVOC'_x not
R49417:49417 Imp <> X def
R49421:49426 Equiv Himp ::'HAVOC'_x not
R49427:49427 Imp <> Y def
def 49442:49444 Himp pYX
R49458:49460 Equiv Himp ::x_';;'_x not
R49451:49456 Equiv Himp ::'HAVOC'_x not
R49457:49457 Imp <> Y def
R49461:49466 Equiv Himp ::'HAVOC'_x not
R49467:49467 Imp <> X def
prf 49575:49588 Himp pXY_cequiv_pYX
R49608:49611 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R49594:49599 Equiv Himp cequiv def
R49605:49607 Equiv Himp pYX def
R49601:49603 Equiv Himp pXY def
R49612:49612 Coq.Init.Logic <> :type_scope:'~'_x not
R49613:49618 Equiv Himp cequiv def
R49624:49626 Equiv Himp pYX def
R49620:49622 Equiv Himp pXY def
def 49792:49797 Himp ptwice
R49811:49813 Equiv Himp ::x_';;'_x not
R49804:49809 Equiv Himp ::'HAVOC'_x not
R49810:49810 Imp <> X def
R49814:49819 Equiv Himp ::'HAVOC'_x not
R49820:49820 Imp <> Y def
def 49835:49839 Himp pcopy
R49853:49855 Equiv Himp ::x_';;'_x not
R49846:49851 Equiv Himp ::'HAVOC'_x not
R49852:49852 Imp <> X def
R49857:49861 Equiv Himp ::x_'::='_x not
R49856:49856 Imp <> Y def
R49862:49864 Imp <> AId constr
R49866:49866 Imp <> X def
prf 50037:50055 Himp ptwice_cequiv_pcopy
R50080:50083 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R50061:50066 Equiv Himp cequiv def
R50075:50079 Equiv Himp pcopy def
R50068:50073 Equiv Himp ptwice def
R50084:50084 Coq.Init.Logic <> :type_scope:'~'_x not
R50085:50090 Equiv Himp cequiv def
R50099:50103 Equiv Himp pcopy def
R50092:50097 Equiv Himp ptwice def
def 50947:50948 Himp p1
R50952:50954 Equiv Himp com ind
R50961:50967 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50995:51003 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51046:51051 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50968:50971 Imp <> BNot constr
R50974:50976 Imp <> BEq constr
R50987:50990 Imp <> ANum constr
R50979:50981 Imp <> AId constr
R50983:50983 Imp <> X def
R51011:51017 Equiv Himp ::x_';;'_x not
R51004:51009 Equiv Himp ::'HAVOC'_x not
R51010:51010 Imp <> Y def
R51019:51023 Equiv Himp ::x_'::='_x not
R51018:51018 Imp <> X def
R51024:51028 Imp <> APlus constr
R51039:51042 Imp <> ANum constr
R51031:51033 Imp <> AId constr
R51035:51035 Imp <> X def
def 51066:51067 Himp p2
R51071:51073 Equiv Himp com ind
R51080:51086 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51114:51122 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51127:51132 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51087:51090 Imp <> BNot constr
R51093:51095 Imp <> BEq constr
R51106:51109 Imp <> ANum constr
R51098:51100 Imp <> AId constr
R51102:51102 Imp <> X def
R51123:51126 Equiv Himp ::'SKIP' not
prf 51390:51403 Himp p1_may_diverge
R51437:51438 Coq.Init.Logic <> :type_scope:'~'_x not
R51441:51443 Equiv Himp ::x_'/'_x_'\\'_x not
R51446:51449 Equiv Himp ::x_'/'_x_'\\'_x not
R51439:51440 Equiv Himp p1 def
R51444:51445 Equiv <> st var
R51450:51452 Equiv <> st' var
R51426:51429 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R51422:51423 Equiv <> st var
R51425:51425 Imp <> X def
prf 51498:51511 Himp p2_may_diverge
R51545:51546 Coq.Init.Logic <> :type_scope:'~'_x not
R51549:51551 Equiv Himp ::x_'/'_x_'\\'_x not
R51554:51557 Equiv Himp ::x_'/'_x_'\\'_x not
R51547:51548 Equiv Himp p2 def
R51552:51553 Equiv <> st var
R51558:51560 Equiv <> st' var
R51534:51537 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R51530:51531 Equiv <> st var
R51533:51533 Imp <> X def
prf 51697:51707 Himp p1_p2_equiv
R51711:51716 Equiv Himp cequiv def
R51721:51722 Equiv Himp p2 def
R51718:51719 Equiv Himp p1 def
def 51904:51905 Himp p3
R51909:51911 Equiv Himp com ind
R51930:51934 Equiv Himp ::x_';;'_x not
R51919:51923 Equiv Himp ::x_'::='_x not
R51918:51918 Imp <> Z def
R51924:51927 Imp <> ANum constr
R51935:51941 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51969:51977 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51999:52004 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51942:51945 Imp <> BNot constr
R51948:51950 Imp <> BEq constr
R51961:51964 Imp <> ANum constr
R51953:51955 Imp <> AId constr
R51957:51957 Imp <> X def
R51985:51991 Equiv Himp ::x_';;'_x not
R51978:51983 Equiv Himp ::'HAVOC'_x not
R51984:51984 Imp <> X def
R51992:51997 Equiv Himp ::'HAVOC'_x not
R51998:51998 Imp <> Z def
def 52019:52020 Himp p4
R52024:52026 Equiv Himp com ind
R52047:52051 Equiv Himp ::x_';;'_x not
R52034:52039 Equiv Himp ::x_'::='_x not
R52046:52046 Equiv Himp ::x_'::='_x not
R52033:52033 Imp <> X def
R52040:52043 Imp <> ANum constr
R52053:52058 Equiv Himp ::x_'::='_x not
R52065:52065 Equiv Himp ::x_'::='_x not
R52052:52052 Imp <> Z def
R52059:52062 Imp <> ANum constr
prf 52078:52090 Himp p3_p4_inequiv
R52094:52095 Coq.Init.Logic <> :type_scope:'~'_x not
R52096:52101 Equiv Himp cequiv def
R52106:52107 Equiv Himp p4 def
R52103:52104 Equiv Himp p3 def
def 52234:52235 Himp p5
R52239:52241 Equiv Himp com ind
R52248:52254 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52282:52290 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52298:52303 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R52255:52258 Imp <> BNot constr
R52261:52263 Imp <> BEq constr
R52274:52277 Imp <> ANum constr
R52266:52268 Imp <> AId constr
R52270:52270 Imp <> X def
R52291:52296 Equiv Himp ::'HAVOC'_x not
R52297:52297 Imp <> X def
def 52318:52319 Himp p6
R52323:52325 Equiv Himp com ind
R52333:52337 Equiv Himp ::x_'::='_x not
R52332:52332 Imp <> X def
R52338:52341 Imp <> ANum constr
prf 52356:52366 Himp p5_p6_equiv
R52370:52375 Equiv Himp cequiv def
R52380:52381 Equiv Himp p6 def
R52377:52378 Equiv Himp p5 def
R52435:52438 Equiv <> <> mod
def 53404:53410 <> stequiv
R53423:53427 Imp <> state def
R53452:53453 Maps <> id ind
R53462:53464 Coq.Init.Logic <> :type_scope:x_'='_x not
R53457:53459 Equiv <> st1 var
R53461:53461 Equiv <> X var
R53465:53467 Equiv <> st2 var
R53469:53469 Equiv <> X var
R53501:53507 Equiv <> stequiv def
not 53482 <> ::x_'~~'_x
prf 53781:53792 <> stequiv_refl
R53809:53813 Imp <> state def
R53821:53824 Equiv <> ::x_'~~'_x not
R53819:53820 Equiv <> st var
R53825:53826 Equiv <> st var
prf 53938:53948 <> stequiv_sym
R53970:53974 Imp <> state def
R53999:54002 Equiv <> ::x_'~~'_x not
R53996:53998 Equiv <> st2 var
R54003:54005 Equiv <> st1 var
R53983:53986 Equiv <> ::x_'~~'_x not
R53980:53982 Equiv <> st1 var
R53987:53989 Equiv <> st2 var
prf 54119:54131 <> stequiv_trans
R54157:54161 Imp <> state def
R54202:54205 Equiv <> ::x_'~~'_x not
R54199:54201 Equiv <> st1 var
R54206:54208 Equiv <> st3 var
R54186:54189 Equiv <> ::x_'~~'_x not
R54183:54185 Equiv <> st2 var
R54190:54192 Equiv <> st3 var
R54170:54173 Equiv <> ::x_'~~'_x not
R54167:54169 Equiv <> st1 var
R54174:54176 Equiv <> st2 var
prf 54355:54370 <> stequiv_t_update
R54392:54396 Imp <> state def
R54428:54429 Maps <> id ind
R54435:54437 Coq.Init.Datatypes <> nat ind
R54459:54462 Equiv <> ::x_'~~'_x not
R54443:54450 Maps <> t_update def
R54458:54458 Equiv <> n var
R54456:54456 Equiv <> X var
R54452:54454 Equiv <> st1 var
R54463:54470 Maps <> t_update def
R54478:54478 Equiv <> n var
R54476:54476 Equiv <> X var
R54472:54474 Equiv <> st2 var
R54405:54408 Equiv <> ::x_'~~'_x not
R54402:54404 Equiv <> st1 var
R54409:54411 Equiv <> st2 var
prf 54722:54734 <> stequiv_aeval
R54756:54760 Imp <> state def
R54792:54795 Imp <> aexp ind
R54810:54812 Coq.Init.Logic <> :type_scope:x_'='_x not
R54799:54803 Imp <> aeval def
R54809:54809 Equiv <> a var
R54805:54807 Equiv <> st1 var
R54813:54817 Imp <> aeval def
R54823:54823 Equiv <> a var
R54819:54821 Equiv <> st2 var
R54769:54772 Equiv <> ::x_'~~'_x not
R54766:54768 Equiv <> st1 var
R54773:54775 Equiv <> st2 var
prf 54938:54950 <> stequiv_beval
R54972:54976 Imp <> state def
R55008:55011 Imp <> bexp ind
R55026:55028 Coq.Init.Logic <> :type_scope:x_'='_x not
R55015:55019 Imp <> beval def
R55025:55025 Equiv <> b var
R55021:55023 Equiv <> st1 var
R55029:55033 Imp <> beval def
R55039:55039 Equiv <> b var
R55035:55037 Equiv <> st2 var
R54985:54988 Equiv <> ::x_'~~'_x not
R54982:54984 Equiv <> st1 var
R54989:54991 Equiv <> st2 var
prf 55268:55280 <> stequiv_ceval
R55301:55305 Imp <> state def
R55338:55340 Imp <> com ind
R55350:55354 Imp <> state def
R55387:55393 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R55406:55412 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R55447:55447 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R55401:55405 Imp <> state def
R55413:55413 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R55429:55434 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R55415:55417 Imp <> ::x_'/'_x_'\\'_x not
R55421:55424 Imp <> ::x_'/'_x_'\\'_x not
R55414:55414 Equiv <> c var
R55418:55420 Equiv <> st2 var
R55425:55428 Equiv <> st2' var
R55439:55442 Equiv <> ::x_'~~'_x not
R55435:55438 Equiv <> st1' var
R55443:55446 Equiv <> st2' var
R55364:55366 Imp <> ::x_'/'_x_'\\'_x not
R55370:55373 Imp <> ::x_'/'_x_'\\'_x not
R55363:55363 Equiv <> c var
R55367:55369 Equiv <> st1 var
R55374:55377 Equiv <> st1' var
R55314:55317 Equiv <> ::x_'~~'_x not
R55311:55313 Equiv <> st1 var
R55318:55320 Equiv <> st2 var
R55655:55662 Maps <> t_update def
R55655:55662 Maps <> t_update def
R55733:55745 Equiv <> stequiv_aeval prfax
R55733:55745 Equiv <> stequiv_aeval prfax
R55773:55788 Equiv <> stequiv_t_update prfax
R55773:55788 Equiv <> stequiv_t_update prfax
R55965:55969 Imp <> E_Seq constr
R55965:55969 Imp <> E_Seq constr
R56118:56125 Imp <> E_IfTrue constr
R56118:56125 Imp <> E_IfTrue constr
R56159:56171 Equiv <> stequiv_beval prfax
R56159:56171 Equiv <> stequiv_beval prfax
R56320:56328 Imp <> E_IfFalse constr
R56320:56328 Imp <> E_IfFalse constr
R56361:56373 Equiv <> stequiv_beval prfax
R56361:56373 Equiv <> stequiv_beval prfax
R56472:56481 Imp <> E_WhileEnd constr
R56472:56481 Imp <> E_WhileEnd constr
R56514:56526 Equiv <> stequiv_beval prfax
R56514:56526 Equiv <> stequiv_beval prfax
R56727:56737 Imp <> E_WhileLoop constr
R56727:56737 Imp <> E_WhileLoop constr
R56787:56799 Equiv <> stequiv_beval prfax
R56787:56799 Equiv <> stequiv_beval prfax
ind 57265:57270 <> ceval'
constr 57311:57317 <> E_equiv
R57290:57294 Imp <> state def
R57281:57285 Imp <> state def
R57274:57276 Imp <> com ind
R57439:57444 Equiv <> ceval' ind
R57388:57390 Equiv <> ::x_'/'_x_'\\'''_x not
R57393:57397 Equiv <> ::x_'/'_x_'\\'''_x not
R57387:57387 Equiv <> c var
R57391:57392 Equiv <> st var
R57398:57401 Equiv <> st'' var
R57371:57374 Equiv <> ::x_'~~'_x not
R57368:57370 Equiv <> st' var
R57375:57378 Equiv <> st'' var
R57348:57350 Imp <> ::x_'/'_x_'\\'_x not
R57353:57356 Imp <> ::x_'/'_x_'\\'_x not
R57347:57347 Equiv <> c var
R57351:57352 Equiv <> st var
R57357:57359 Equiv <> st' var
R57439:57444 Equiv <> ceval' ind
not 57413 <> ::x_'/'_x_'\\'''_x
def 57534:57540 <> cequiv'
R57551:57553 Imp <> com ind
R57585:57589 Imp <> state def
R57597:57597 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R57613:57619 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R57635:57635 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R57600:57602 Equiv <> ::x_'/'_x_'\\'''_x not
R57605:57609 Equiv <> ::x_'/'_x_'\\'''_x not
R57598:57599 Equiv <> c1 var
R57603:57604 Equiv <> st var
R57610:57612 Equiv <> st' var
R57622:57624 Equiv <> ::x_'/'_x_'\\'''_x not
R57627:57631 Equiv <> ::x_'/'_x_'\\'''_x not
R57620:57621 Equiv <> c2 var
R57625:57626 Equiv <> st var
R57632:57634 Equiv <> st' var
prf 57807:57821 <> cequiv__cequiv'
R57840:57842 Imp <> com ind
R57864:57870 Equiv <> cequiv' def
R57875:57876 Equiv <> c2 var
R57872:57873 Equiv <> c1 var
R57848:57853 Equiv <> cequiv def
R57858:57859 Equiv <> c2 var
R57855:57856 Equiv <> c1 var
R57895:57900 Equiv <> cequiv def
R57903:57909 Equiv <> cequiv' def
R57960:57966 Equiv <> E_equiv constr
R57960:57966 Equiv <> E_equiv constr
R58059:58065 Equiv <> E_equiv constr
R58059:58065 Equiv <> E_equiv constr
prf 58398:58417 <> t_update_same_no_ext
R58441:58449 Maps <> total_map def
R58451:58451 Equiv <> X var
R58480:58482 Coq.Init.Logic <> :type_scope:x_'='_x not
R58457:58464 Maps <> t_update def
R58478:58479 Equiv <> x2 var
R58472:58472 Equiv <> m var
R58474:58475 Equiv <> x1 var
R58468:58469 Equiv <> x1 var
R58466:58466 Equiv <> m var
R58483:58483 Equiv <> m var
R58485:58486 Equiv <> x2 var
def 58536:58555 <> identity_assignment'
R58561:58567 Equiv <> cequiv' def
R58576:58580 Imp <> ::x_'::='_x not
R58575:58575 Imp <> X def
R58581:58583 Imp <> AId constr
R58585:58585 Imp <> X def
R58569:58572 Imp <> ::'SKIP' not
R58607:58613 Equiv <> cequiv' def
R58738:58745 Maps <> t_update def
R58760:58760 Imp <> X def
R58752:58752 Imp <> X def
R58724:58730 Equiv <> E_equiv constr
R58738:58745 Maps <> t_update def
R58760:58760 Imp <> X def
R58752:58752 Imp <> X def
R58724:58730 Equiv <> E_equiv constr
R58839:58842 Equiv <> ::x_'~~'_x not
R58815:58822 Maps <> t_update def
R58837:58837 Imp <> X def
R58829:58829 Imp <> X def
R58839:58842 Equiv <> ::x_'~~'_x not
R58815:58822 Maps <> t_update def
R58837:58837 Imp <> X def
R58829:58829 Imp <> X def
R58870:58876 Equiv <> stequiv def
R58903:58922 Equiv <> t_update_same_no_ext prfax
R58903:58922 Equiv <> t_update_same_no_ext prfax
R58940:58952 Equiv <> stequiv_trans prfax
R58940:58952 Equiv <> stequiv_trans prfax
prf 60305:60335 <> swap_noninterfering_assignments
R60438:60443 Equiv <> cequiv def
R60487:60489 Imp <> ::x_';;'_x not
R60480:60484 Imp <> ::x_'::='_x not
R60478:60479 Equiv <> l2 var
R60485:60486 Equiv <> a2 var
R60492:60496 Imp <> ::x_'::='_x not
R60490:60491 Equiv <> l1 var
R60497:60498 Equiv <> a1 var
R60459:60461 Imp <> ::x_';;'_x not
R60452:60456 Imp <> ::x_'::='_x not
R60450:60451 Equiv <> l1 var
R60457:60458 Equiv <> a1 var
R60464:60468 Imp <> ::x_'::='_x not
R60462:60463 Equiv <> l2 var
R60469:60470 Equiv <> a2 var
R60406:60425 Equiv <> var_not_used_in_aexp ind
R60430:60431 Equiv <> a1 var
R60427:60428 Equiv <> l2 var
R60374:60393 Equiv <> var_not_used_in_aexp ind
R60398:60399 Equiv <> a2 var
R60395:60396 Equiv <> l1 var
R60362:60365 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R60360:60361 Equiv <> l1 var
R60366:60367 Equiv <> l2 var
