DIGEST 912c6e152697a6466b57f20e4262ffc5
FTactics
R63:66 Poly <> <> lib
prf 969:974 <> silly1
R996:998 Coq.Init.Datatypes <> nat ind
R1049:1051 Coq.Init.Logic <> :type_scope:x_'='_x not
R1044:1044 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1046:1046 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1048:1048 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1047:1047 Tactics <> o var
R1045:1045 Tactics <> n var
R1052:1052 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1054:1054 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1056:1056 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1055:1055 Tactics <> p var
R1053:1053 Tactics <> m var
R1027:1029 Coq.Init.Logic <> :type_scope:x_'='_x not
R1022:1022 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1024:1024 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1026:1026 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1025:1025 Tactics <> o var
R1023:1023 Tactics <> n var
R1030:1030 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1032:1032 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1034:1034 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1033:1033 Tactics <> p var
R1031:1031 Tactics <> n var
R1008:1010 Coq.Init.Logic <> :type_scope:x_'='_x not
R1007:1007 Tactics <> n var
R1011:1011 Tactics <> m var
prf 1604:1609 <> silly2
R1631:1633 Coq.Init.Datatypes <> nat ind
R1715:1717 Coq.Init.Logic <> :type_scope:x_'='_x not
R1710:1710 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1712:1712 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1714:1714 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1713:1713 Tactics <> o var
R1711:1711 Tactics <> n var
R1718:1718 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1720:1720 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1722:1722 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1721:1721 Tactics <> p var
R1719:1719 Tactics <> m var
R1672:1674 Coq.Init.Datatypes <> nat ind
R1692:1694 Coq.Init.Logic <> :type_scope:x_'='_x not
R1687:1687 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1689:1689 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1691:1691 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1690:1690 Tactics <> o var
R1688:1688 Tactics <> q var
R1695:1695 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1697:1697 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1699:1699 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R1698:1698 Tactics <> p var
R1696:1696 Tactics <> r var
R1679:1681 Coq.Init.Logic <> :type_scope:x_'='_x not
R1678:1678 Tactics <> q var
R1682:1682 Tactics <> r var
R1643:1645 Coq.Init.Logic <> :type_scope:x_'='_x not
R1642:1642 Tactics <> n var
R1646:1646 Tactics <> m var
prf 2389:2395 <> silly2a
R2413:2415 Coq.Init.Datatypes <> nat ind
R2507:2509 Coq.Init.Logic <> :type_scope:x_'='_x not
R2504:2504 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2506:2506 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2505:2505 Tactics <> n var
R2510:2510 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2512:2512 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2511:2511 Tactics <> m var
R2462:2464 Coq.Init.Datatypes <> nat ind
R2488:2490 Coq.Init.Logic <> :type_scope:x_'='_x not
R2485:2485 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2487:2487 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2486:2486 Tactics <> q var
R2491:2491 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2493:2493 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R2492:2492 Tactics <> r var
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2468:2468 Poly <> ::'('_x_','_x_')' not
R2470:2470 Poly <> ::'('_x_','_x_')' not
R2472:2472 Poly <> ::'('_x_','_x_')' not
R2469:2469 Tactics <> q var
R2471:2471 Tactics <> q var
R2476:2476 Poly <> ::'('_x_','_x_')' not
R2478:2478 Poly <> ::'('_x_','_x_')' not
R2480:2480 Poly <> ::'('_x_','_x_')' not
R2477:2477 Tactics <> r var
R2479:2479 Tactics <> r var
R2429:2431 Coq.Init.Logic <> :type_scope:x_'='_x not
R2424:2424 Poly <> ::'('_x_','_x_')' not
R2426:2426 Poly <> ::'('_x_','_x_')' not
R2428:2428 Poly <> ::'('_x_','_x_')' not
R2425:2425 Tactics <> n var
R2427:2427 Tactics <> n var
R2432:2432 Poly <> ::'('_x_','_x_')' not
R2434:2434 Poly <> ::'('_x_','_x_')' not
R2436:2436 Poly <> ::'('_x_','_x_')' not
R2433:2433 Tactics <> m var
R2435:2435 Tactics <> m var
prf 2695:2702 <> silly_ex
R2797:2799 Coq.Init.Logic <> :type_scope:x_'='_x not
R2791:2794 Basics <> oddb def
R2800:2803 Basics <> true constr
R2775:2777 Coq.Init.Logic <> :type_scope:x_'='_x not
R2768:2772 Basics <> evenb def
R2778:2781 Basics <> true constr
R2751:2753 Coq.Init.Logic <> :type_scope:x_'='_x not
R2741:2744 Basics <> oddb def
R2747:2747 Coq.Init.Datatypes <> S constr
R2749:2749 Tactics <> n var
R2754:2757 Basics <> true constr
R2730:2732 Coq.Init.Logic <> :type_scope:x_'='_x not
R2723:2727 Basics <> evenb def
R2729:2729 Tactics <> n var
R2733:2736 Basics <> true constr
prf 3099:3113 <> silly3_firsttry
R3129:3131 Coq.Init.Datatypes <> nat ind
R3187:3189 Coq.Init.Logic <> :type_scope:x_'='_x not
R3168:3174 Basics <> beq_nat def
R3177:3177 Coq.Init.Datatypes <> S constr
R3180:3180 Coq.Init.Datatypes <> S constr
R3182:3182 Tactics <> n var
R3190:3193 Basics <> true constr
R3144:3146 Coq.Init.Logic <> :type_scope:x_'='_x not
R3140:3143 Basics <> true constr
R3147:3153 Basics <> beq_nat def
R3155:3155 Tactics <> n var
prf 3413:3418 <> silly3
R3434:3436 Coq.Init.Datatypes <> nat ind
R3492:3494 Coq.Init.Logic <> :type_scope:x_'='_x not
R3473:3479 Basics <> beq_nat def
R3482:3482 Coq.Init.Datatypes <> S constr
R3485:3485 Coq.Init.Datatypes <> S constr
R3487:3487 Tactics <> n var
R3495:3498 Basics <> true constr
R3449:3451 Coq.Init.Logic <> :type_scope:x_'='_x not
R3445:3448 Basics <> true constr
R3452:3458 Basics <> beq_nat def
R3460:3460 Tactics <> n var
prf 3889:3901 <> rev_exercise1
R3920:3923 Poly <> list ind
R3925:3927 Coq.Init.Datatypes <> nat ind
R3957:3959 Coq.Init.Logic <> :type_scope:x_'='_x not
R3955:3956 Tactics <> l' var
R3960:3962 Poly <> rev def
R3964:3964 Tactics <> l var
R3937:3939 Coq.Init.Logic <> :type_scope:x_'='_x not
R3936:3936 Tactics <> l var
R3940:3942 Poly <> rev def
R3944:3945 Tactics <> l' var
R4017:4030 Poly <> rev_involutive thm
R4017:4030 Poly <> rev_involutive thm
def 4495:4510 <> trans_eq_example
R4536:4538 Coq.Init.Datatypes <> nat ind
R4596:4598 Coq.Init.Logic <> :type_scope:x_'='_x not
R4591:4591 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4593:4593 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4595:4595 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4594:4594 Tactics <> b var
R4592:4592 Tactics <> a var
R4599:4599 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4601:4601 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4603:4603 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4602:4602 Tactics <> f var
R4600:4600 Tactics <> e var
R4574:4576 Coq.Init.Logic <> :type_scope:x_'='_x not
R4569:4569 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4571:4571 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4573:4573 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4572:4572 Tactics <> d var
R4570:4570 Tactics <> c var
R4577:4577 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4579:4579 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4581:4581 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4580:4580 Tactics <> f var
R4578:4578 Tactics <> e var
R4552:4554 Coq.Init.Logic <> :type_scope:x_'='_x not
R4547:4547 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4549:4549 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4551:4551 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4550:4550 Tactics <> b var
R4548:4548 Tactics <> a var
R4555:4555 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4557:4557 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4559:4559 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R4558:4558 Tactics <> d var
R4556:4556 Tactics <> c var
prf 4855:4862 <> trans_eq
R4891:4891 Tactics <> X var
R4916:4918 Coq.Init.Logic <> :type_scope:x_'='_x not
R4915:4915 Tactics <> n var
R4919:4919 Tactics <> o var
R4907:4909 Coq.Init.Logic <> :type_scope:x_'='_x not
R4906:4906 Tactics <> m var
R4910:4910 Tactics <> o var
R4898:4900 Coq.Init.Logic <> :type_scope:x_'='_x not
R4897:4897 Tactics <> n var
R4901:4901 Tactics <> m var
def 5175:5191 <> trans_eq_example'
R5217:5219 Coq.Init.Datatypes <> nat ind
R5277:5279 Coq.Init.Logic <> :type_scope:x_'='_x not
R5272:5272 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5274:5274 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5276:5276 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5275:5275 Tactics <> b var
R5273:5273 Tactics <> a var
R5280:5280 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5282:5282 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5284:5284 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5283:5283 Tactics <> f var
R5281:5281 Tactics <> e var
R5255:5257 Coq.Init.Logic <> :type_scope:x_'='_x not
R5250:5250 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5252:5252 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5254:5254 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5253:5253 Tactics <> d var
R5251:5251 Tactics <> c var
R5258:5258 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5260:5260 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5262:5262 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5261:5261 Tactics <> f var
R5259:5259 Tactics <> e var
R5233:5235 Coq.Init.Logic <> :type_scope:x_'='_x not
R5228:5228 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5230:5230 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5232:5232 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5231:5231 Tactics <> b var
R5229:5229 Tactics <> a var
R5236:5236 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5238:5238 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5240:5240 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5239:5239 Tactics <> d var
R5237:5237 Tactics <> c var
R5769:5769 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5771:5771 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5773:5773 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5751:5758 Tactics <> trans_eq thm
R5769:5769 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5771:5771 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5773:5773 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R5751:5758 Tactics <> trans_eq thm
def 6104:6120 <> trans_eq_exercise
R6142:6144 Coq.Init.Datatypes <> nat ind
R6198:6198 Coq.Init.Logic <> :type_scope:x_'='_x not
R6204:6208 Coq.Init.Logic <> :type_scope:x_'='_x not
R6219:6219 Coq.Init.Logic <> :type_scope:x_'='_x not
R6200:6202 Basics <> :nat_scope:x_'+'_x not
R6199:6199 Tactics <> n var
R6203:6203 Tactics <> p var
R6209:6216 Basics <> minustwo def
R6218:6218 Tactics <> o var
R6178:6178 Coq.Init.Logic <> :type_scope:x_'='_x not
R6184:6187 Coq.Init.Logic <> :type_scope:x_'='_x not
R6180:6182 Basics <> :nat_scope:x_'+'_x not
R6179:6179 Tactics <> n var
R6183:6183 Tactics <> p var
R6188:6188 Tactics <> m var
R6154:6157 Coq.Init.Logic <> :type_scope:x_'='_x not
R6168:6168 Coq.Init.Logic <> :type_scope:x_'='_x not
R6153:6153 Tactics <> m var
R6158:6165 Basics <> minustwo def
R6167:6167 Tactics <> o var
R6274:6281 Tactics <> trans_eq thm
R6274:6281 Tactics <> trans_eq thm
prf 7823:7833 <> S_injective
R7851:7853 Coq.Init.Datatypes <> nat ind
R7875:7877 Coq.Init.Logic <> :type_scope:x_'='_x not
R7874:7874 Tactics <> n var
R7878:7878 Tactics <> m var
R7862:7864 Coq.Init.Logic <> :type_scope:x_'='_x not
R7859:7859 Coq.Init.Datatypes <> S constr
R7861:7861 Tactics <> n var
R7865:7865 Coq.Init.Datatypes <> S constr
R7867:7867 Tactics <> m var
prf 8486:8498 <> inversion_ex1
R8518:8520 Coq.Init.Datatypes <> nat ind
R8550:8552 Coq.Init.Logic <> :type_scope:x_'='_x not
R8547:8547 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8549:8549 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8548:8548 Tactics <> n var
R8553:8553 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8555:8555 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8554:8554 Tactics <> m var
R8532:8534 Coq.Init.Logic <> :type_scope:x_'='_x not
R8526:8526 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8528:8529 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8531:8531 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8530:8530 Tactics <> m var
R8527:8527 Tactics <> n var
R8535:8535 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8537:8538 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8540:8540 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8539:8539 Tactics <> o var
R8536:8536 Tactics <> o var
prf 8726:8738 <> inversion_ex2
R8756:8758 Coq.Init.Datatypes <> nat ind
R8780:8782 Coq.Init.Logic <> :type_scope:x_'='_x not
R8779:8779 Tactics <> n var
R8783:8783 Tactics <> m var
R8767:8769 Coq.Init.Logic <> :type_scope:x_'='_x not
R8764:8764 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8766:8766 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8765:8765 Tactics <> n var
R8770:8770 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8772:8772 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R8771:8771 Tactics <> m var
def 8905:8917 <> inversion_ex3
R8948:8948 Tactics <> X var
R8958:8961 Poly <> list ind
R8963:8963 Tactics <> X var
R9017:9019 Coq.Init.Logic <> :type_scope:x_'='_x not
R9016:9016 Tactics <> x var
R9020:9020 Tactics <> y var
R9001:9003 Coq.Init.Logic <> :type_scope:x_'='_x not
R8996:8999 Poly <> ::x_'::'_x not
R8995:8995 Tactics <> y var
R9000:9000 Tactics <> l var
R9005:9008 Poly <> ::x_'::'_x not
R9004:9004 Tactics <> x var
R9009:9009 Tactics <> j var
R8980:8982 Coq.Init.Logic <> :type_scope:x_'='_x not
R8970:8973 Poly <> ::x_'::'_x not
R8969:8969 Tactics <> x var
R8975:8978 Poly <> ::x_'::'_x not
R8974:8974 Tactics <> y var
R8979:8979 Tactics <> l var
R8984:8987 Poly <> ::x_'::'_x not
R8983:8983 Tactics <> z var
R8988:8988 Tactics <> j var
prf 9386:9392 <> f_equal
R9425:9425 Tactics <> B var
R9420:9420 Tactics <> A var
R9434:9434 Tactics <> A var
R9453:9455 Coq.Init.Logic <> :type_scope:x_'='_x not
R9450:9450 Tactics <> f var
R9452:9452 Tactics <> x var
R9456:9456 Tactics <> f var
R9458:9458 Tactics <> y var
R9442:9444 Coq.Init.Logic <> :type_scope:x_'='_x not
R9441:9441 Tactics <> x var
R9445:9445 Tactics <> y var
prf 9750:9760 <> beq_nat_0_l
R9800:9802 Coq.Init.Logic <> :type_scope:x_'='_x not
R9799:9799 Tactics <> n var
R9788:9790 Coq.Init.Logic <> :type_scope:x_'='_x not
R9777:9783 Basics <> beq_nat def
R9787:9787 Tactics <> n var
R9791:9794 Basics <> true constr
prf 10659:10671 <> inversion_ex4
R10687:10689 Coq.Init.Datatypes <> nat ind
R10713:10715 Coq.Init.Logic <> :type_scope:x_'='_x not
R10709:10711 Basics <> :nat_scope:x_'+'_x not
R10698:10700 Coq.Init.Logic <> :type_scope:x_'='_x not
R10695:10695 Coq.Init.Datatypes <> S constr
R10697:10697 Tactics <> n var
R10701:10701 Coq.Init.Datatypes <> O constr
prf 10777:10789 <> inversion_ex5
R10807:10809 Coq.Init.Datatypes <> nat ind
R10836:10838 Coq.Init.Logic <> :type_scope:x_'='_x not
R10833:10833 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10835:10835 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10834:10834 Tactics <> n var
R10839:10839 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10841:10841 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R10840:10840 Tactics <> m var
R10820:10822 Coq.Init.Logic <> :type_scope:x_'='_x not
R10815:10819 Basics <> false constr
R10823:10826 Basics <> true constr
def 11333:11345 <> inversion_ex6
R11376:11376 Tactics <> X var
R11386:11389 Poly <> list ind
R11391:11391 Tactics <> X var
R11441:11443 Coq.Init.Logic <> :type_scope:x_'='_x not
R11440:11440 Tactics <> x var
R11444:11444 Tactics <> z var
R11425:11427 Coq.Init.Logic <> :type_scope:x_'='_x not
R11420:11423 Poly <> ::x_'::'_x not
R11419:11419 Tactics <> y var
R11424:11424 Tactics <> l var
R11429:11432 Poly <> ::x_'::'_x not
R11428:11428 Tactics <> z var
R11433:11433 Tactics <> j var
R11408:11410 Coq.Init.Logic <> :type_scope:x_'='_x not
R11398:11401 Poly <> ::x_'::'_x not
R11397:11397 Tactics <> x var
R11403:11406 Poly <> ::x_'::'_x not
R11402:11402 Tactics <> y var
R11407:11407 Tactics <> l var
R11411:11412 Poly <> ::'['_']' not
prf 12722:12726 <> S_inj
R12744:12746 Coq.Init.Datatypes <> nat ind
R12754:12757 Basics <> bool ind
R12810:12812 Coq.Init.Logic <> :type_scope:x_'='_x not
R12799:12805 Basics <> beq_nat def
R12809:12809 Tactics <> m var
R12807:12807 Tactics <> n var
R12813:12813 Tactics <> b var
R12785:12787 Coq.Init.Logic <> :type_scope:x_'='_x not
R12766:12772 Basics <> beq_nat def
R12781:12781 Coq.Init.Datatypes <> S constr
R12783:12783 Tactics <> m var
R12775:12775 Coq.Init.Datatypes <> S constr
R12777:12777 Tactics <> n var
R12788:12788 Tactics <> b var
prf 13674:13680 <> silly3'
R13696:13698 Coq.Init.Datatypes <> nat ind
R13795:13797 Coq.Init.Logic <> :type_scope:x_'='_x not
R13791:13794 Basics <> true constr
R13798:13804 Basics <> beq_nat def
R13807:13807 Coq.Init.Datatypes <> S constr
R13810:13810 Coq.Init.Datatypes <> S constr
R13812:13812 Tactics <> n var
R13767:13769 Coq.Init.Logic <> :type_scope:x_'='_x not
R13763:13766 Basics <> true constr
R13770:13776 Basics <> beq_nat def
R13778:13778 Tactics <> n var
R13746:13748 Coq.Init.Logic <> :type_scope:x_'='_x not
R13727:13733 Basics <> beq_nat def
R13736:13736 Coq.Init.Datatypes <> S constr
R13739:13739 Coq.Init.Datatypes <> S constr
R13741:13741 Tactics <> n var
R13749:13752 Basics <> true constr
R13716:13718 Coq.Init.Logic <> :type_scope:x_'='_x not
R13705:13711 Basics <> beq_nat def
R13713:13713 Tactics <> n var
R13719:13722 Basics <> true constr
prf 14645:14662 <> plus_n_n_injective
R14706:14708 Coq.Init.Logic <> :type_scope:x_'='_x not
R14705:14705 Tactics <> n var
R14709:14709 Tactics <> m var
R14688:14690 Coq.Init.Logic <> :type_scope:x_'='_x not
R14684:14686 Basics <> :nat_scope:x_'+'_x not
R14683:14683 Tactics <> n var
R14687:14687 Tactics <> n var
R14692:14694 Basics <> :nat_scope:x_'+'_x not
R14691:14691 Tactics <> m var
R14695:14695 Tactics <> m var
R14913:14919 Tactics <> f_equal thm
R14913:14919 Tactics <> f_equal thm
R14972:14980 Induction <> plus_n_Sm thm
R14972:14980 Induction <> plus_n_Sm thm
R15007:15015 Induction <> plus_n_Sm thm
R15007:15015 Induction <> plus_n_Sm thm
prf 15982:16004 <> double_injective_FAILED
R16054:16056 Coq.Init.Logic <> :type_scope:x_'='_x not
R16053:16053 Tactics <> n var
R16057:16057 Tactics <> m var
R16033:16035 Coq.Init.Logic <> :type_scope:x_'='_x not
R16025:16030 Induction <> double def
R16032:16032 Tactics <> n var
R16036:16041 Induction <> double def
R16043:16043 Tactics <> m var
R16339:16345 Tactics <> f_equal thm
R16339:16345 Tactics <> f_equal thm
prf 18615:18630 <> double_injective
R18680:18682 Coq.Init.Logic <> :type_scope:x_'='_x not
R18679:18679 Tactics <> n var
R18683:18683 Tactics <> m var
R18659:18661 Coq.Init.Logic <> :type_scope:x_'='_x not
R18651:18656 Induction <> double def
R18658:18658 Tactics <> n var
R18662:18667 Induction <> double def
R18669:18669 Tactics <> m var
R19564:19570 Tactics <> f_equal thm
R19564:19570 Tactics <> f_equal thm
prf 20585:20596 <> beq_nat_true
R20639:20641 Coq.Init.Logic <> :type_scope:x_'='_x not
R20638:20638 Tactics <> n var
R20642:20642 Tactics <> m var
R20627:20629 Coq.Init.Logic <> :type_scope:x_'='_x not
R20616:20622 Basics <> beq_nat def
R20626:20626 Tactics <> m var
R20624:20624 Tactics <> n var
R20630:20633 Basics <> true constr
R20877:20883 Tactics <> f_equal thm
R20877:20883 Tactics <> f_equal thm
prf 21279:21289 <> beq_id_true
R21329:21331 Coq.Init.Logic <> :type_scope:x_'='_x not
R21328:21328 Tactics <> x var
R21332:21332 Tactics <> y var
R21317:21319 Coq.Init.Logic <> :type_scope:x_'='_x not
R21307:21312 Lists <> beq_id def
R21316:21316 Tactics <> y var
R21314:21314 Tactics <> x var
R21320:21323 Basics <> true constr
R21393:21395 Coq.Init.Logic <> :type_scope:x_'='_x not
R21393:21395 Coq.Init.Logic <> :type_scope:x_'='_x not
R21408:21419 Tactics <> beq_nat_true thm
R21408:21419 Tactics <> beq_nat_true thm
prf 21764:21792 <> double_injective_take2_FAILED
R21842:21844 Coq.Init.Logic <> :type_scope:x_'='_x not
R21841:21841 Tactics <> n var
R21845:21845 Tactics <> m var
R21821:21823 Coq.Init.Logic <> :type_scope:x_'='_x not
R21813:21818 Induction <> double def
R21820:21820 Tactics <> n var
R21824:21829 Induction <> double def
R21831:21831 Tactics <> m var
R22127:22133 Tactics <> f_equal thm
R22127:22133 Tactics <> f_equal thm
prf 23050:23071 <> double_injective_take2
R23121:23123 Coq.Init.Logic <> :type_scope:x_'='_x not
R23120:23120 Tactics <> n var
R23124:23124 Tactics <> m var
R23100:23102 Coq.Init.Logic <> :type_scope:x_'='_x not
R23092:23097 Induction <> double def
R23099:23099 Tactics <> n var
R23103:23108 Induction <> double def
R23110:23110 Tactics <> m var
R23588:23594 Tactics <> f_equal thm
R23588:23594 Tactics <> f_equal thm
prf 25586:25605 <> nth_error_after_last
R25620:25622 Coq.Init.Datatypes <> nat ind
R25641:25644 Poly <> list ind
R25646:25646 Tactics <> X var
R25689:25691 Coq.Init.Logic <> :type_scope:x_'='_x not
R25676:25684 Poly <> nth_error def
R25688:25688 Tactics <> n var
R25686:25686 Tactics <> l var
R25692:25695 Poly <> None constr
R25663:25665 Coq.Init.Logic <> :type_scope:x_'='_x not
R25655:25660 Poly <> length def
R25662:25662 Tactics <> l var
R25666:25666 Tactics <> n var
prf 25890:25904 <> app_length_cons
R25935:25938 Poly <> list ind
R25940:25940 Tactics <> X var
R25983:25983 Tactics <> X var
R25991:25993 Coq.Init.Datatypes <> nat ind
R26060:26062 Coq.Init.Logic <> :type_scope:x_'='_x not
R26039:26039 Coq.Init.Datatypes <> S constr
R26042:26047 Poly <> length def
R26052:26055 Poly <> ::x_'++'_x not
R26050:26051 Tactics <> l1 var
R26056:26057 Tactics <> l2 var
R26063:26063 Tactics <> n var
R26026:26028 Coq.Init.Logic <> :type_scope:x_'='_x not
R26002:26007 Poly <> length def
R26012:26016 Poly <> ::x_'++'_x not
R26024:26024 Poly <> ::x_'++'_x not
R26010:26011 Tactics <> l1 var
R26018:26021 Poly <> ::x_'::'_x not
R26017:26017 Tactics <> x var
R26022:26023 Tactics <> l2 var
R26029:26029 Tactics <> n var
prf 26264:26279 <> app_length_twice
R26302:26304 Coq.Init.Datatypes <> nat ind
R26310:26313 Poly <> list ind
R26315:26315 Tactics <> X var
R26360:26362 Coq.Init.Logic <> :type_scope:x_'='_x not
R26345:26350 Poly <> length def
R26354:26357 Poly <> ::x_'++'_x not
R26353:26353 Tactics <> l var
R26358:26358 Tactics <> l var
R26364:26366 Basics <> :nat_scope:x_'+'_x not
R26363:26363 Tactics <> n var
R26367:26367 Tactics <> n var
R26332:26334 Coq.Init.Logic <> :type_scope:x_'='_x not
R26324:26329 Poly <> length def
R26331:26331 Tactics <> l var
R26335:26335 Tactics <> n var
prf 26558:26573 <> double_induction
R26595:26597 Coq.Init.Datatypes <> nat ind
R26588:26590 Coq.Init.Datatypes <> nat ind
R26749:26749 Tactics <> P var
R26753:26753 Tactics <> n var
R26751:26751 Tactics <> m var
R26717:26717 Tactics <> P var
R26726:26726 Coq.Init.Datatypes <> S constr
R26728:26728 Tactics <> n var
R26720:26720 Coq.Init.Datatypes <> S constr
R26722:26722 Tactics <> m var
R26708:26708 Tactics <> P var
R26712:26712 Tactics <> n var
R26710:26710 Tactics <> m var
R26679:26679 Tactics <> P var
R26684:26684 Coq.Init.Datatypes <> S constr
R26686:26686 Tactics <> n var
R26670:26670 Tactics <> P var
R26674:26674 Tactics <> n var
R26643:26643 Tactics <> P var
R26646:26646 Coq.Init.Datatypes <> S constr
R26648:26648 Tactics <> m var
R26634:26634 Tactics <> P var
R26636:26636 Tactics <> m var
R26612:26612 Tactics <> P var
def 27213:27220 <> sillyfun
R27227:27229 Coq.Init.Datatypes <> nat ind
R27234:27237 Basics <> bool ind
R27247:27253 Basics <> beq_nat def
R27255:27255 Tactics <> n var
R27280:27286 Basics <> beq_nat def
R27288:27288 Tactics <> n var
R27310:27314 Basics <> false constr
R27297:27301 Basics <> false constr
R27264:27268 Basics <> false constr
prf 27522:27535 <> sillyfun_false
R27551:27553 Coq.Init.Datatypes <> nat ind
R27569:27571 Coq.Init.Logic <> :type_scope:x_'='_x not
R27559:27566 Tactics <> sillyfun def
R27568:27568 Tactics <> n var
R27572:27576 Basics <> false constr
R27605:27612 Tactics <> sillyfun def
R27628:27634 Basics <> beq_nat def
R27628:27634 Basics <> beq_nat def
R27728:27734 Basics <> beq_nat def
R27728:27734 Basics <> beq_nat def
prf 28565:28577 <> combine_split
R28597:28600 Poly <> list ind
R28604:28606 Poly <> :type_scope:x_'*'_x not
R28603:28603 Tactics <> X var
R28607:28607 Tactics <> Y var
R28657:28659 Coq.Init.Logic <> :type_scope:x_'='_x not
R28644:28650 Poly <> combine def
R28655:28656 Tactics <> l2 var
R28652:28653 Tactics <> l1 var
R28660:28660 Tactics <> l var
R28627:28629 Coq.Init.Logic <> :type_scope:x_'='_x not
R28620:28624 Poly <> split def
R28626:28626 Tactics <> l var
R28630:28630 Poly <> ::'('_x_','_x_')' not
R28633:28634 Poly <> ::'('_x_','_x_')' not
R28637:28637 Poly <> ::'('_x_','_x_')' not
R28631:28632 Tactics <> l1 var
R28635:28636 Tactics <> l2 var
def 28935:28943 <> sillyfun1
R28950:28952 Coq.Init.Datatypes <> nat ind
R28957:28960 Basics <> bool ind
R28970:28976 Basics <> beq_nat def
R28978:28978 Tactics <> n var
R29002:29008 Basics <> beq_nat def
R29010:29010 Tactics <> n var
R29031:29035 Basics <> false constr
R29019:29022 Basics <> true constr
R28987:28990 Basics <> true constr
prf 29299:29318 <> sillyfun1_odd_FAILED
R29334:29336 Coq.Init.Datatypes <> nat ind
R29378:29380 Coq.Init.Logic <> :type_scope:x_'='_x not
R29372:29375 Basics <> oddb def
R29377:29377 Tactics <> n var
R29381:29384 Basics <> true constr
R29356:29358 Coq.Init.Logic <> :type_scope:x_'='_x not
R29345:29353 Tactics <> sillyfun1 def
R29355:29355 Tactics <> n var
R29359:29362 Basics <> true constr
R29416:29424 Tactics <> sillyfun1 def
R29445:29451 Basics <> beq_nat def
R29445:29451 Basics <> beq_nat def
prf 30299:30311 <> sillyfun1_odd
R30327:30329 Coq.Init.Datatypes <> nat ind
R30371:30373 Coq.Init.Logic <> :type_scope:x_'='_x not
R30365:30368 Basics <> oddb def
R30370:30370 Tactics <> n var
R30374:30377 Basics <> true constr
R30349:30351 Coq.Init.Logic <> :type_scope:x_'='_x not
R30338:30346 Tactics <> sillyfun1 def
R30348:30348 Tactics <> n var
R30352:30355 Basics <> true constr
R30409:30417 Tactics <> sillyfun1 def
R30438:30444 Basics <> beq_nat def
R30438:30444 Basics <> beq_nat def
R30694:30705 Tactics <> beq_nat_true thm
R30694:30705 Tactics <> beq_nat_true thm
R30995:31001 Basics <> beq_nat def
R30995:31001 Basics <> beq_nat def
R31062:31073 Tactics <> beq_nat_true thm
R31062:31073 Tactics <> beq_nat_true thm
prf 31238:31259 <> bool_fn_applied_thrice
R31286:31289 Basics <> bool ind
R31278:31281 Basics <> bool ind
R31297:31300 Basics <> bool ind
R31318:31320 Coq.Init.Logic <> :type_scope:x_'='_x not
R31307:31307 Tactics <> f var
R31310:31310 Tactics <> f var
R31313:31313 Tactics <> f var
R31315:31315 Tactics <> b var
R31321:31321 Tactics <> f var
R31323:31323 Tactics <> b var
prf 33762:33772 <> beq_nat_sym
R33790:33792 Coq.Init.Datatypes <> nat ind
R33809:33811 Coq.Init.Logic <> :type_scope:x_'='_x not
R33798:33804 Basics <> beq_nat def
R33808:33808 Tactics <> m var
R33806:33806 Tactics <> n var
R33812:33818 Basics <> beq_nat def
R33822:33822 Tactics <> n var
R33820:33820 Tactics <> m var
prf 34695:34707 <> beq_nat_trans
R34786:34788 Coq.Init.Logic <> :type_scope:x_'='_x not
R34775:34781 Basics <> beq_nat def
R34785:34785 Tactics <> p var
R34783:34783 Tactics <> n var
R34789:34792 Basics <> true constr
R34762:34764 Coq.Init.Logic <> :type_scope:x_'='_x not
R34751:34757 Basics <> beq_nat def
R34761:34761 Tactics <> p var
R34759:34759 Tactics <> m var
R34765:34768 Basics <> true constr
R34738:34740 Coq.Init.Logic <> :type_scope:x_'='_x not
R34727:34733 Basics <> beq_nat def
R34737:34737 Tactics <> m var
R34735:34735 Tactics <> n var
R34741:34744 Basics <> true constr
R34820:34831 Tactics <> beq_nat_true thm
R34820:34831 Tactics <> beq_nat_true thm
R34847:34858 Tactics <> beq_nat_true thm
R34847:34858 Tactics <> beq_nat_true thm
R34935:34937 Coq.Init.Logic <> :type_scope:x_'='_x not
R34924:34930 Basics <> beq_nat def
R34934:34934 Tactics <> x var
R34932:34932 Tactics <> x var
R34938:34941 Basics <> true constr
R34935:34937 Coq.Init.Logic <> :type_scope:x_'='_x not
R34924:34930 Basics <> beq_nat def
R34934:34934 Tactics <> x var
R34932:34932 Tactics <> x var
R34938:34941 Basics <> true constr
def 35744:35766 <> split_combine_statement
R35797:35801 Basics <> admit prfax
prf 35813:35825 <> split_combine
R35829:35851 Tactics <> split_combine_statement def
prf 36049:36063 <> filter_exercise
R36098:36101 Basics <> bool ind
R36093:36093 Tactics <> X var
R36138:36138 Tactics <> X var
R36149:36152 Poly <> list ind
R36154:36154 Tactics <> X var
R36201:36203 Coq.Init.Logic <> :type_scope:x_'='_x not
R36195:36198 Tactics <> test var
R36200:36200 Tactics <> x var
R36204:36207 Basics <> true constr
R36176:36178 Coq.Init.Logic <> :type_scope:x_'='_x not
R36163:36168 Poly <> filter def
R36175:36175 Tactics <> l var
R36170:36173 Tactics <> test var
R36180:36183 Poly <> ::x_'::'_x not
R36179:36179 Tactics <> x var
R36184:36185 Tactics <> lf var
def 37163:37169 <> forallb
R37185:37188 Basics <> bool ind
R37180:37180 Tactics <> X var
R37197:37200 Poly <> list ind
R37202:37202 Tactics <> X var
R37216:37216 Tactics <> l var
R37229:37231 Poly <> ::'['_']' not
R37236:37239 Basics <> true constr
R37248:37251 Poly <> ::x_'::'_x not
R37263:37263 Tactics <> f var
R37293:37296 Basics <> true constr
R37301:37307 Tactics <> forallb def
R37309:37309 Tactics <> f var
R37334:37338 Basics <> false constr
R37343:37347 Basics <> false constr
def 37388:37397 <> forall_ex1
R37425:37427 Coq.Init.Logic <> :type_scope:x_'='_x not
R37401:37407 Tactics <> forallb def
R37414:37414 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37416:37416 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37418:37418 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37420:37420 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37422:37422 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37424:37424 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37409:37412 Basics <> oddb def
R37428:37431 Basics <> true constr
def 37479:37488 <> forall_ex2
R37518:37520 Coq.Init.Logic <> :type_scope:x_'='_x not
R37492:37498 Tactics <> forallb def
R37505:37505 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37511:37511 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37517:37517 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37512:37516 Basics <> false constr
R37506:37510 Basics <> false constr
R37500:37503 Basics <> negb def
R37521:37524 Basics <> true constr
def 37572:37581 <> forall_ex3
R37608:37610 Coq.Init.Logic <> :type_scope:x_'='_x not
R37585:37591 Tactics <> forallb def
R37599:37599 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37601:37601 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37603:37603 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37605:37605 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37607:37607 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37593:37597 Basics <> evenb def
R37611:37615 Basics <> false constr
def 37663:37672 <> forall_ex4
R37699:37701 Coq.Init.Logic <> :type_scope:x_'='_x not
R37676:37682 Tactics <> forallb def
R37696:37698 Poly <> ::'['_']' not
R37685:37691 Basics <> beq_nat def
R37702:37705 Basics <> true constr
def 37754:37760 <> existsb
R37776:37779 Basics <> bool ind
R37771:37771 Tactics <> X var
R37788:37791 Poly <> list ind
R37793:37793 Tactics <> X var
R37807:37807 Tactics <> l var
R37820:37822 Poly <> ::'['_']' not
R37827:37831 Basics <> false constr
R37840:37843 Poly <> ::x_'::'_x not
R37855:37855 Tactics <> f var
R37885:37888 Basics <> true constr
R37893:37896 Basics <> true constr
R37919:37923 Basics <> false constr
R37928:37934 Tactics <> existsb def
R37936:37936 Tactics <> f var
def 37980:37985 <> ex_ex1
R38018:38020 Coq.Init.Logic <> :type_scope:x_'='_x not
R37989:37995 Tactics <> existsb def
R38009:38009 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38011:38011 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38013:38013 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38015:38015 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38017:38017 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R37998:38004 Basics <> beq_nat def
R38021:38025 Basics <> false constr
def 38069:38074 <> ex_ex2
R38115:38117 Coq.Init.Logic <> :type_scope:x_'='_x not
R38078:38084 Tactics <> existsb def
R38098:38098 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38103:38103 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38108:38108 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38114:38114 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38109:38113 Basics <> false constr
R38104:38107 Basics <> true constr
R38099:38102 Basics <> true constr
R38087:38090 Basics <> andb def
R38092:38095 Basics <> true constr
R38118:38121 Basics <> true constr
def 38158:38163 <> ex_ex3
R38194:38196 Coq.Init.Logic <> :type_scope:x_'='_x not
R38168:38174 Tactics <> existsb def
R38181:38181 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38183:38183 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38185:38185 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38187:38187 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38189:38189 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38191:38191 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38193:38193 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38176:38179 Basics <> oddb def
R38197:38200 Basics <> true constr
def 38237:38242 <> ex_ex4
R38264:38266 Coq.Init.Logic <> :type_scope:x_'='_x not
R38248:38254 Tactics <> existsb def
R38262:38263 Poly <> ::'['_']' not
R38256:38260 Basics <> evenb def
R38267:38271 Basics <> false constr
def 38359:38366 <> existsb'
R38383:38386 Basics <> bool ind
R38378:38378 Tactics <> X var
R38395:38398 Poly <> list ind
R38400:38400 Tactics <> X var
R38408:38411 Basics <> negb def
R38414:38420 Tactics <> forallb def
R38444:38444 Tactics <> l var
R38432:38435 Basics <> negb def
R38438:38438 Tactics <> f var
R38440:38440 Tactics <> x var
def 38457:38463 <> ex_ex1'
R38497:38499 Coq.Init.Logic <> :type_scope:x_'='_x not
R38467:38474 Tactics <> existsb' def
R38488:38488 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38490:38490 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38492:38492 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38494:38494 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38496:38496 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38477:38483 Basics <> beq_nat def
R38500:38504 Basics <> false constr
def 38552:38558 <> ex_ex2'
R38600:38602 Coq.Init.Logic <> :type_scope:x_'='_x not
R38562:38569 Tactics <> existsb' def
R38583:38583 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38588:38588 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38593:38593 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38599:38599 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38594:38598 Basics <> false constr
R38589:38592 Basics <> true constr
R38584:38587 Basics <> true constr
R38572:38575 Basics <> andb def
R38577:38580 Basics <> true constr
R38603:38606 Basics <> true constr
def 38643:38649 <> ex_ex3'
R38680:38682 Coq.Init.Logic <> :type_scope:x_'='_x not
R38653:38660 Tactics <> existsb' def
R38667:38667 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38669:38669 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38671:38671 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38673:38673 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38675:38675 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38677:38677 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38679:38679 Poly <> ::'['_x_';'_'..'_';'_x_']' not
R38662:38665 Basics <> oddb def
R38683:38686 Basics <> true constr
def 38723:38729 <> ex_ex4'
R38750:38752 Coq.Init.Logic <> :type_scope:x_'='_x not
R38733:38740 Tactics <> existsb' def
R38748:38749 Poly <> ::'['_']' not
R38742:38746 Basics <> evenb def
R38753:38757 Basics <> false constr
prf 38794:38809 <> existsb_existsb'
R38837:38840 Basics <> bool ind
R38832:38832 Tactics <> X var
R38846:38849 Poly <> list ind
R38851:38851 Tactics <> X var
R38868:38870 Coq.Init.Logic <> :type_scope:x_'='_x not
R38857:38863 Tactics <> existsb def
R38867:38867 Tactics <> l var
R38865:38865 Tactics <> f var
R38871:38878 Tactics <> existsb' def
R38882:38882 Tactics <> l var
R38880:38880 Tactics <> f var
R39040:39047 Tactics <> existsb' def
